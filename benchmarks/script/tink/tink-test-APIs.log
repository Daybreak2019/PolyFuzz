
copying build/lib.linux-x86_64-3.9/tink/cc/pybind/tink_bindings.cpython-39-x86_64-linux-gnu.so -> 
test_invalid_aes_ctr_hmac_params_throw_exception (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_invalid_aes_ctr_hmac_params_throw_exception ... ok
test_invalid_aes_gcm_hkdf_params_throw_exception (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_invalid_aes_gcm_hkdf_params_throw_exception ... ok
test_new_aes_ctr_hmac_key_data (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_new_aes_ctr_hmac_key_data ... ok
test_new_aes_gcm_hkdf_key_data (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_new_aes_gcm_hkdf_key_data ... ok
test_raw_encrypt_decrypt_close (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_raw_encrypt_decrypt_close ... ok
test_raw_encrypt_decrypt_empty (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_raw_encrypt_decrypt_empty ... ok
test_raw_encrypt_decrypt_read (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_raw_encrypt_decrypt_read ... ok
test_raw_encrypt_decrypt_readall (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_raw_encrypt_decrypt_readall ... ok
test_raw_encrypt_decrypt_readinto (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_raw_encrypt_decrypt_readinto ... ok
test_raw_encrypt_decrypt_wrong_aad (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_raw_encrypt_decrypt_wrong_aad ... ok
test_raw_read_after_eof_returns_empty_bytes (tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest)
tink.streaming_aead._streaming_aead_key_manager_test.StreamingAeadKeyManagerTest.test_raw_read_after_eof_returns_empty_bytes ... ok
test_closed_methods_raise (tink.streaming_aead._decrypting_stream_test.DecryptingStreamTest)
tink.streaming_aead._decrypting_stream_test.DecryptingStreamTest.test_closed_methods_raise ... ok
test_inquiries (tink.streaming_aead._decrypting_stream_test.DecryptingStreamTest)
tink.streaming_aead._decrypting_stream_test.DecryptingStreamTest.test_inquiries ... ok
test_unsupported_operation (tink.streaming_aead._decrypting_stream_test.DecryptingStreamTest)
tink.streaming_aead._decrypting_stream_test.DecryptingStreamTest.test_unsupported_operation ... ok
test_decrypt_fails_on_nonreadable_stream (tink.streaming_aead._streaming_aead_test.StreamingAeadTest)
tink.streaming_aead._streaming_aead_test.StreamingAeadTest.test_decrypt_fails_on_nonreadable_stream ... ok
test_encrypt_decrypt (tink.streaming_aead._streaming_aead_test.StreamingAeadTest)
tink.streaming_aead._streaming_aead_test.StreamingAeadTest.test_encrypt_decrypt ... ok
test_encrypt_decrypt_raw (tink.streaming_aead._streaming_aead_test.StreamingAeadTest)
tink.streaming_aead._streaming_aead_test.StreamingAeadTest.test_encrypt_decrypt_raw ... ok
test_encrypt_decrypt_textiowrapper (tink.streaming_aead._streaming_aead_test.StreamingAeadTest)
tink.streaming_aead._streaming_aead_test.StreamingAeadTest.test_encrypt_decrypt_textiowrapper ... ok
test_encrypt_fails_on_nonwritable_stream (tink.streaming_aead._streaming_aead_test.StreamingAeadTest)
tink.streaming_aead._streaming_aead_test.StreamingAeadTest.test_encrypt_fails_on_nonwritable_stream ... ok
test_closed (tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest)
tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest.test_closed ... ok
test_closed_methods_raise (tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest)
tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest.test_closed_methods_raise ... ok
test_context_manager_exception_closes_dest_file (tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest)
tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest.test_context_manager_exception_closes_dest_file
Tests that exceptional exits trigger normal file closure. ... ok
test_flush (tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest)
tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest.test_flush ... ok
test_inquiries (tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest)
tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest.test_inquiries ... ok
test_unsupported_operation (tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest)
tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest.test_unsupported_operation ... ok
test_write_non_bytes (tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest)
tink.streaming_aead._encrypting_stream_test.EncryptingStreamTest.test_write_non_bytes ... ok
test_read_slow0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest.test_read_slow0 (False)
test_read_slow(False) ... ok
test_read_slow1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest.test_read_slow1 (True)
test_read_slow(True) ... ok
test_read_slow_raw0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest.test_read_slow_raw0 (False)
test_read_slow_raw(False) ... ok
test_read_slow_raw1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest.test_read_slow_raw1 (True)
test_read_slow_raw(True) ... ok
test_read_slow_raw_readall0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest.test_read_slow_raw_readall0 (False)
test_read_slow_raw_readall(False) ... ok
test_read_slow_raw_readall1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamSlowTest.test_read_slow_raw_readall1 (True)
test_read_slow_raw_readall(True) ... ok
test_disable_rewind0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_disable_rewind0 (False)
test_disable_rewind(False) ... ok
test_disable_rewind1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_disable_rewind1 (True)
test_disable_rewind(True) ... ok
test_disable_rewind_readall0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_disable_rewind_readall0 (False)
test_disable_rewind_readall(False) ... ok
test_disable_rewind_readall1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_disable_rewind_readall1 (True)
test_disable_rewind_readall(True) ... ok
test_nonreadable_input_fail (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_nonreadable_input_fail ... ok
test_read0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_read0 (False)
test_read(False) ... ok
test_read1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_read1 (True)
test_read(True) ... ok
test_read_minus_one0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_read_minus_one0 (False)
test_read_minus_one(False) ... ok
test_read_minus_one1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_read_minus_one1 (True)
test_read_minus_one(True) ... ok
test_read_no_argument0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_read_no_argument0 (False)
test_read_no_argument(False) ... ok
test_read_no_argument1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_read_no_argument1 (True)
test_read_no_argument(True) ... ok
test_readall0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_readall0 (False)
test_readall(False) ... ok
test_readall1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_readall1 (True)
test_readall(True) ... ok
test_rewind_read0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_rewind_read0 (False)
test_rewind_read(False) ... ok
test_rewind_read1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_rewind_read1 (True)
test_rewind_read(True) ... ok
test_rewind_readall0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_rewind_readall0 (False)
test_rewind_readall(False) ... ok
test_rewind_readall1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_rewind_readall1 (True)
test_rewind_readall(True) ... ok
test_rewind_twice0 (False) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_rewind_twice0 (False)
test_rewind_twice(False) ... ok
test_rewind_twice1 (True) (tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest)
tink.streaming_aead._rewindable_input_stream_test.RewindableInputStreamTest.test_rewind_twice1 (True)
test_rewind_twice(True) ... ok
test_create_aes_ctr_hmac_streaming_key_template (tink.streaming_aead._streaming_aead_key_templates_test.StreamingAeadKeyTemplatesTest)
tink.streaming_aead._streaming_aead_key_templates_test.StreamingAeadKeyTemplatesTest.test_create_aes_ctr_hmac_streaming_key_template ... ok
test_create_aes_gcm_hkdf_streaming_key_template (tink.streaming_aead._streaming_aead_key_templates_test.StreamingAeadKeyTemplatesTest)
tink.streaming_aead._streaming_aead_key_templates_test.StreamingAeadKeyTemplatesTest.test_create_aes_gcm_hkdf_streaming_key_template ... ok
test_basic_read (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_basic_read ... ok
test_basic_write (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_basic_write ... ok
test_multiple_read (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_multiple_read ... ok
test_multiple_write (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_multiple_write ... ok
test_partial_write (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_partial_write ... ok
test_read_eof (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_read_eof ... ok
test_read_negative_size_fails (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_read_negative_size_fails ... ok
test_read_raises_blocking_error (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_read_raises_blocking_error ... ok
test_read_returns_none (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_read_returns_none ... ok
test_read_size_0 (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_read_size_0 ... ok
test_write_after_close (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_write_after_close ... ok
test_write_raises_blocking_error (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_write_raises_blocking_error ... ok
test_write_returns_none (tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest)
tink.streaming_aead._file_object_adapter_test.FileObjectAdapterTest.test_write_returns_none ... ok
test_decrypt_unknown_key_fails (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_decrypt_unknown_key_fails ... ok
test_encrypt_decrypt_bad_aad (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_encrypt_decrypt_bad_aad ... ok
test_encrypt_decrypt_success0 (b'plaintext') (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_encrypt_decrypt_success0 (b'plaintext')
test_encrypt_decrypt_success(b'plaintext') ... ok
test_encrypt_decrypt_success1 (b'') (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_encrypt_decrypt_success1 (b'')
test_encrypt_decrypt_success(b'') ... ok
test_encrypt_decrypt_success2 (b'smile \xf0\x9f\x98\x80') (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_encrypt_decrypt_success2 (b'smile \xf0\x9f\x98\x80')
test_encrypt_decrypt_success(b'smile \xf0\x9f\x98\x80') ... ok
test_encrypt_decrypt_success3 (b'\xf0\x9f\x98') (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_encrypt_decrypt_success3 (b'\xf0\x9f\x98')
test_encrypt_decrypt_success(b'\xf0\x9f\x98') ... ok
test_encrypt_decrypt_with_key_rotation0 (<class '_io.BytesIO'>) (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_encrypt_decrypt_with_key_rotation0 (<class '_io.BytesIO'>)
test_encrypt_decrypt_with_key_rotation(<class '_io.BytesIO'>) ... ok
test_encrypt_decrypt_with_key_rotation1 (<class 'tink.testing.bytes_io.SlowBytesIO'>) (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_encrypt_decrypt_with_key_rotation1 (<class 'tink.testing.bytes_io.SlowBytesIO'>)
test_encrypt_decrypt_with_key_rotation(<class 'tink.testing.bytes_io.SlowBytesIO'>) ... ok
test_encrypt_decrypt_with_key_rotation2 (<class 'tink.testing.bytes_io.SlowReadableRawBytes'>) (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_encrypt_decrypt_with_key_rotation2 (<class 'tink.testing.bytes_io.SlowReadableRawBytes'>)
test_encrypt_decrypt_with_key_rotation(<class 'tink.testing.bytes_io.SlowReadableRawBytes'>) ... ok
test_long_plaintext_encrypt_decrypt_success (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_long_plaintext_encrypt_decrypt_success ... ok
test_slow_encrypt_decrypt_success0 (<class 'tink.testing.bytes_io.SlowBytesIO'>) (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_slow_encrypt_decrypt_success0 (<class 'tink.testing.bytes_io.SlowBytesIO'>)
test_slow_encrypt_decrypt_success(<class 'tink.testing.bytes_io.SlowBytesIO'>) ... ok
test_slow_encrypt_decrypt_success1 (<class 'tink.testing.bytes_io.SlowReadableRawBytes'>) (tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest)
tink.streaming_aead._streaming_aead_wrapper_test.StreamingAeadWrapperTest.test_slow_encrypt_decrypt_success1 (<class 'tink.testing.bytes_io.SlowReadableRawBytes'>)
test_slow_encrypt_decrypt_success(<class 'tink.testing.bytes_io.SlowReadableRawBytes'>) ... ok
test_client_generation (tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest)
tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest.test_client_generation ... ok
test_client_not_bound (tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest)
tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest.test_client_not_bound ... ok
test_client_registration (tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest)
tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest.test_client_registration ... ok
test_wrong_credentials_path (tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest)
tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest.test_wrong_credentials_path ... ok
test_wrong_key_uri (tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest)
tink.integration.awskms._aws_kms_client_test.AwsKmsClientTest.test_wrong_key_uri ... ok
test_corrupted_ciphertext (tink.integration.awskms._aws_kms_aead_test.AwsKmsAeadTest)
tink.integration.awskms._aws_kms_aead_test.AwsKmsAeadTest.test_corrupted_ciphertext ... ERROR
test_encrypt_decrypt (tink.integration.awskms._aws_kms_aead_test.AwsKmsAeadTest)
tink.integration.awskms._aws_kms_aead_test.AwsKmsAeadTest.test_encrypt_decrypt ... ERROR
test_encrypt_with_bad_credentials (tink.integration.awskms._aws_kms_aead_test.AwsKmsAeadTest)
tink.integration.awskms._aws_kms_aead_test.AwsKmsAeadTest.test_encrypt_with_bad_credentials ... ok
test_encrypt_with_bad_uri (tink.integration.awskms._aws_kms_aead_test.AwsKmsAeadTest)
tink.integration.awskms._aws_kms_aead_test.AwsKmsAeadTest.test_encrypt_with_bad_uri ... ok
test_corrupted_ciphertext (tink.integration.gcpkms._gcp_kms_aead_test.GcpKmsAeadTest)
tink.integration.gcpkms._gcp_kms_aead_test.GcpKmsAeadTest.test_corrupted_ciphertext ... ERROR
test_encrypt_decrypt (tink.integration.gcpkms._gcp_kms_aead_test.GcpKmsAeadTest)
tink.integration.gcpkms._gcp_kms_aead_test.GcpKmsAeadTest.test_encrypt_decrypt ... ERROR
test_encrypt_decrypt_localized_uri (tink.integration.gcpkms._gcp_kms_aead_test.GcpKmsAeadTest)
tink.integration.gcpkms._gcp_kms_aead_test.GcpKmsAeadTest.test_encrypt_decrypt_localized_uri ... ERROR
test_encrypt_with_bad_uri (tink.integration.gcpkms._gcp_kms_aead_test.GcpKmsAeadTest)
tink.integration.gcpkms._gcp_kms_aead_test.GcpKmsAeadTest.test_encrypt_with_bad_uri ... ok
test_client_generation (tink.integration.gcpkms._gcp_kms_client_test.GcpKmsClientTest)
tink.integration.gcpkms._gcp_kms_client_test.GcpKmsClientTest.test_client_generation ... ok
test_client_invalid_path (tink.integration.gcpkms._gcp_kms_client_test.GcpKmsClientTest)
tink.integration.gcpkms._gcp_kms_client_test.GcpKmsClientTest.test_client_invalid_path ... ok
test_client_not_bound (tink.integration.gcpkms._gcp_kms_client_test.GcpKmsClientTest)
tink.integration.gcpkms._gcp_kms_client_test.GcpKmsClientTest.test_client_not_bound ... ok
test_client_registration (tink.integration.gcpkms._gcp_kms_client_test.GcpKmsClientTest)
tink.integration.gcpkms._gcp_kms_client_test.GcpKmsClientTest.test_client_registration ... ok
test_write_encrypted_invalid_fails (tink._keyset_writer_test.BinaryKeysetReaderTest)
tink._keyset_writer_test.BinaryKeysetReaderTest.test_write_encrypted_invalid_fails ... ok
test_write_encrypted_read_encrypted (tink._keyset_writer_test.BinaryKeysetReaderTest)
tink._keyset_writer_test.BinaryKeysetReaderTest.test_write_encrypted_read_encrypted ... ok
test_write_invalid_fails (tink._keyset_writer_test.BinaryKeysetReaderTest)
tink._keyset_writer_test.BinaryKeysetReaderTest.test_write_invalid_fails ... ok
test_write_read (tink._keyset_writer_test.BinaryKeysetReaderTest)
tink._keyset_writer_test.BinaryKeysetReaderTest.test_write_read ... ok
test_write_encrypted_invalid_fails (tink._keyset_writer_test.JsonKeysetWriterTest)
tink._keyset_writer_test.JsonKeysetWriterTest.test_write_encrypted_invalid_fails ... ok
test_write_encrypted_read_encrypted (tink._keyset_writer_test.JsonKeysetWriterTest)
tink._keyset_writer_test.JsonKeysetWriterTest.test_write_encrypted_read_encrypted ... ok
test_write_invalid_fails (tink._keyset_writer_test.JsonKeysetWriterTest)
tink._keyset_writer_test.JsonKeysetWriterTest.test_write_invalid_fails ... ok
test_write_read (tink._keyset_writer_test.JsonKeysetWriterTest)
tink._keyset_writer_test.JsonKeysetWriterTest.test_write_read ... ok
test_write_read_with_unicode_chars (tink._keyset_writer_test.JsonKeysetWriterTest)
tink._keyset_writer_test.JsonKeysetWriterTest.test_write_read_with_unicode_chars ... ok
test_decrypt_fails0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest)
tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest.test_decrypt_fails0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
)
test_decrypt_fails(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_decrypt_fails1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\n\\\n\004\010\002\020\003\022R\022P\n8type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey\022\022\n\006\n\002\010\020\020\020\022\010\n\004\010\003\020\020\020 \030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest)
tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest.test_decrypt_fails1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\n\\\n\004\010\002\020\003\022R\022P\n8type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey\022\022\n\006\n\002\010\020\020\020\022\010\n\004\010\003\020\020\020 \030\001\030\001"
output_prefix_type: TINK
)
test_decrypt_fails(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_encrypt_decrypt0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest)
tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest.test_encrypt_decrypt0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
)
test_encrypt_decrypt(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_encrypt_decrypt1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\n\\\n\004\010\002\020\003\022R\022P\n8type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey\022\022\n\006\n\002\010\020\020\020\022\010\n\004\010\003\020\020\020 \030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest)
tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest.test_encrypt_decrypt1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\n\\\n\004\010\002\020\003\022R\022P\n8type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey\022\022\n\006\n\002\010\020\020\020\022\010\n\004\010\003\020\020\020 \030\001\030\001"
output_prefix_type: TINK
)
test_encrypt_decrypt(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_new_key_data (tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest)
tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest.test_new_key_data ... ok
test_new_keyset_handle_invalid_params_throw_exception (tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest)
tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest.test_new_keyset_handle_invalid_params_throw_exception ... ok
test_new_keyset_hanlde_on_public_key_fails (tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest)
tink.hybrid._hybrid_key_manager_test.HybridKeyManagerTest.test_new_keyset_hanlde_on_public_key_fails ... ok
test_create_aes_eax_key_template (tink.hybrid._hybrid_key_templates_test.HybridKeyTemplatesTest)
tink.hybrid._hybrid_key_templates_test.HybridKeyTemplatesTest.test_create_aes_eax_key_template ... ok
test_decrypt_unknown_ciphertext_fails0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_decrypt_unknown_ciphertext_fails0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
)
test_decrypt_unknown_ciphertext_fails(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_decrypt_unknown_ciphertext_fails1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_decrypt_unknown_ciphertext_fails1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
)
test_decrypt_unknown_ciphertext_fails(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_decrypt_wrong_associated_data_fails0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_decrypt_wrong_associated_data_fails0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
)
test_decrypt_wrong_associated_data_fails(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_decrypt_wrong_associated_data_fails1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_decrypt_wrong_associated_data_fails1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
)
test_decrypt_wrong_associated_data_fails(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_encrypt_decrypt0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_encrypt_decrypt0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
)
test_encrypt_decrypt(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_encrypt_decrypt1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_encrypt_decrypt1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
)
test_encrypt_decrypt(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_encrypt_decrypt_with_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_encrypt_decrypt_with_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_encrypt_decrypt_with_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_encrypt_decrypt_with_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_encrypt_decrypt_with_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_encrypt_decrypt_with_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_encrypt_decrypt_with_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
) (tink.hybrid._hybrid_wrapper_test.HybridWrapperTest)
tink.hybrid._hybrid_wrapper_test.HybridWrapperTest.test_encrypt_decrypt_with_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey"
value: "\nD\n\004\010\002\020\003\022:\0228\n0type.googleapis.com/google.crypto.tink.AesGcmKey\022\002\020\020\030\001\030\001"
output_prefix_type: RAW
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" ... ok
test_add_invalid_key_fails (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_add_invalid_key_fails ... ok
test_add_wrong_primitive_fails (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_add_wrong_primitive_fails ... ok
test_all_primitives (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_all_primitives ... ok
test_list_of_entries_can_be_modified (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_list_of_entries_can_be_modified ... ok
test_primary_returns_none (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_primary_returns_none ... ok
test_primary_returns_primary (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_primary_returns_primary ... ok
test_primitive_class (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_primitive_class ... ok
test_primitive_from_identifier_returns_entry (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_primitive_from_identifier_returns_entry ... ok
test_primitive_returns_entry (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_primitive_returns_entry ... ok
test_raw_primitives (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_raw_primitives ... ok
test_same_key_id_and_prefix_type (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_same_key_id_and_prefix_type ... ok
test_same_key_id_but_different_prefix_type (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_same_key_id_but_different_prefix_type ... ok
test_unknown_key_returns_empty_list (tink.core._primitive_set_test.PrimitiveSetTest)
tink.core._primitive_set_test.PrimitiveSetTest.test_unknown_key_returns_empty_list ... ok
test_key_manager_disable_new_key_enable_fails (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_key_manager_disable_new_key_enable_fails ... ok
test_key_manager_no_exist (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_key_manager_no_exist ... ok
test_key_manager_register (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_key_manager_register ... ok
test_key_manager_replace_fails (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_key_manager_replace_fails ... ok
test_key_manager_reset (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_key_manager_reset ... ok
test_new_key_data_no_new_key_allowed (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_new_key_data_no_new_key_allowed ... ok
test_new_key_data_success (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_new_key_data_success ... ok
test_new_key_data_wrong_type_url (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_new_key_data_wrong_type_url ... ok
test_primitive_fails_on_subclass (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_primitive_fails_on_subclass ... ok
test_primitive_fails_on_wrong_primitive (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_primitive_fails_on_wrong_primitive ... ok
test_primitive_ok (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_primitive_ok ... ok
test_primitive_wrapper_reset (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_primitive_wrapper_reset ... ok
test_public_key_data_fails_for_non_asymmetric_private_key (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_public_key_data_fails_for_non_asymmetric_private_key ... ok
test_public_key_data_fails_for_non_private_key_manager (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_public_key_data_fails_for_non_private_key_manager ... ok
test_public_key_data_success (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_public_key_data_success ... ok
test_register_different_primitive_wrappers_twice_fails (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_register_different_primitive_wrappers_twice_fails ... ok
test_register_inconsistent_wrapper_fails (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_register_inconsistent_wrapper_fails ... ok
test_register_prf_to_prfset_wrapper_success (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_register_prf_to_prfset_wrapper_success ... ok
test_register_same_key_manager_twice (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_register_same_key_manager_twice ... ok
test_register_same_primitive_wrapper_twice (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_register_same_primitive_wrapper_twice ... ok
test_register_unsupported_key_manager_fails (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_register_unsupported_key_manager_fails ... ok
test_two_wrappers_with_equal_input_primitive_class_success (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_two_wrappers_with_equal_input_primitive_class_success ... ok
test_two_wrappers_with_equal_primitive_class_fails (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_two_wrappers_with_equal_primitive_class_fails ... ok
test_wrap_success (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_wrap_success ... ok
test_wrap_unknown_primitive (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_wrap_unknown_primitive ... ok
test_wrap_with_incompatible_primitive_class_fails (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_wrap_with_incompatible_primitive_class_fails ... ok
test_wrap_with_primitive_class_success (tink.core._registry_test.RegistryTest)
tink.core._registry_test.RegistryTest.test_wrap_with_primitive_class_success ... ok
test_crunchy_prefix (tink.core._crypto_format_test.CryptoFormatTest)
tink.core._crypto_format_test.CryptoFormatTest.test_crunchy_prefix ... ok
test_invalid_output_prefix (tink.core._crypto_format_test.CryptoFormatTest)
tink.core._crypto_format_test.CryptoFormatTest.test_invalid_output_prefix ... ok
test_legacy_prefix (tink.core._crypto_format_test.CryptoFormatTest)
tink.core._crypto_format_test.CryptoFormatTest.test_legacy_prefix ... ok
test_raw_prefix (tink.core._crypto_format_test.CryptoFormatTest)
tink.core._crypto_format_test.CryptoFormatTest.test_raw_prefix ... ok
test_tink_prefix (tink.core._crypto_format_test.CryptoFormatTest)
tink.core._crypto_format_test.CryptoFormatTest.test_tink_prefix ... ok
test_has_secret_access (tink.secret_key_access_test.SecretKeyAccessTest)
tink.secret_key_access_test.SecretKeyAccessTest.test_has_secret_access ... ok
test_other_key_access_does_not_have_secret_access (tink.secret_key_access_test.SecretKeyAccessTest)
tink.secret_key_access_test.SecretKeyAccessTest.test_other_key_access_does_not_have_secret_access ... ok
test_public_key_access_does_not_have_secret_access (tink.secret_key_access_test.SecretKeyAccessTest)
tink.secret_key_access_test.SecretKeyAccessTest.test_public_key_access_does_not_have_secret_access ... ok
test_encrypt_decrypt (tink.daead._deterministic_aead_key_manager_test.DeterministicAeadKeyManagerTest)
tink.daead._deterministic_aead_key_manager_test.DeterministicAeadKeyManagerTest.test_encrypt_decrypt ... ok
test_invalid_decrypt_raises_error (tink.daead._deterministic_aead_key_manager_test.DeterministicAeadKeyManagerTest)
tink.daead._deterministic_aead_key_manager_test.DeterministicAeadKeyManagerTest.test_invalid_decrypt_raises_error ... ok
test_invalid_params_throw_exception (tink.daead._deterministic_aead_key_manager_test.DeterministicAeadKeyManagerTest)
tink.daead._deterministic_aead_key_manager_test.DeterministicAeadKeyManagerTest.test_invalid_params_throw_exception ... ok
test_new_key_data (tink.daead._deterministic_aead_key_manager_test.DeterministicAeadKeyManagerTest)
tink.daead._deterministic_aead_key_manager_test.DeterministicAeadKeyManagerTest.test_new_key_data ... ok
test_decrypt_unknown_ciphertext_fails0 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_decrypt_unknown_ciphertext_fails0 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
)
test_decrypt_unknown_ciphertext_fails(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_decrypt_unknown_ciphertext_fails1 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_decrypt_unknown_ciphertext_fails1 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
)
test_decrypt_unknown_ciphertext_fails(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_decrypt_wrong_associated_data_fails0 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_decrypt_wrong_associated_data_fails0 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
)
test_decrypt_wrong_associated_data_fails(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_decrypt_wrong_associated_data_fails1 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_decrypt_wrong_associated_data_fails1 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
)
test_decrypt_wrong_associated_data_fails(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_encrypt_decrypt0 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt0 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
)
test_encrypt_decrypt(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_encrypt_decrypt1 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt1 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
)
test_encrypt_decrypt(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_encrypt_decrypt_with_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt_with_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_encrypt_decrypt_with_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt_with_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_encrypt_decrypt_with_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt_with_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_encrypt_decrypt_with_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
) (tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest)
tink.daead._deterministic_aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt_with_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.AesSivKey"
value: "\010@"
output_prefix_type: RAW
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.AesSivKey" ... ok
test_create_aes_siv_key_template (tink.daead._deterministic_aead_key_templates_test.DeterministicAeadKeyTemplatesTest)
tink.daead._deterministic_aead_key_templates_test.DeterministicAeadKeyTemplatesTest.test_create_aes_siv_key_template ... ok
test_invalid_length_fails (tink.prf._prf_set_wrapper_test.PrfSetWrapperTest)
tink.prf._prf_set_wrapper_test.PrfSetWrapperTest.test_invalid_length_fails ... ok
test_wrap_three_with_one_disabled (tink.prf._prf_set_wrapper_test.PrfSetWrapperTest)
tink.prf._prf_set_wrapper_test.PrfSetWrapperTest.test_wrap_three_with_one_disabled ... ok
test_wrapped_output_is_equal (tink.prf._prf_set_wrapper_test.PrfSetWrapperTest)
tink.prf._prf_set_wrapper_test.PrfSetWrapperTest.test_wrapped_output_is_equal ... ok
test_compute_success0 (type_url: "type.googleapis.com/google.crypto.tink.AesCmacPrfKey"
value: "\010 "
output_prefix_type: RAW
) (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_compute_success0 (type_url: "type.googleapis.com/google.crypto.tink.AesCmacPrfKey"
value: "\010 "
output_prefix_type: RAW
)
test_compute_success(type_url: "type.googleapis.com/google.crypto.tink.AesCmacPrfKey" ... ok
test_compute_success1 (type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey"
value: "\n\002\010\003\020 "
output_prefix_type: RAW
) (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_compute_success1 (type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey"
value: "\n\002\010\003\020 "
output_prefix_type: RAW
)
test_compute_success(type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey" ... ok
test_compute_success2 (type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey"
value: "\n\002\010\004\020@"
output_prefix_type: RAW
) (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_compute_success2 (type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey"
value: "\n\002\010\004\020@"
output_prefix_type: RAW
)
test_compute_success(type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey" ... ok
test_compute_success3 (type_url: "type.googleapis.com/google.crypto.tink.HkdfPrfKey"
value: "\n\002\010\003\020 "
output_prefix_type: RAW
) (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_compute_success3 (type_url: "type.googleapis.com/google.crypto.tink.HkdfPrfKey"
value: "\n\002\010\003\020 "
output_prefix_type: RAW
)
test_compute_success(type_url: "type.googleapis.com/google.crypto.tink.HkdfPrfKey" ... ok
test_invalid_params_throw_exception (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_invalid_params_throw_exception ... ok
test_new_key_data_success (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_new_key_data_success ... ok
test_output_too_long_raises_error0 (type_url: "type.googleapis.com/google.crypto.tink.AesCmacPrfKey"
value: "\010 "
output_prefix_type: RAW
) (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_output_too_long_raises_error0 (type_url: "type.googleapis.com/google.crypto.tink.AesCmacPrfKey"
value: "\010 "
output_prefix_type: RAW
)
test_output_too_long_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesCmacPrfKey" ... ok
test_output_too_long_raises_error1 (type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey"
value: "\n\002\010\003\020 "
output_prefix_type: RAW
) (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_output_too_long_raises_error1 (type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey"
value: "\n\002\010\003\020 "
output_prefix_type: RAW
)
test_output_too_long_raises_error(type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey" ... ok
test_output_too_long_raises_error2 (type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey"
value: "\n\002\010\004\020@"
output_prefix_type: RAW
) (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_output_too_long_raises_error2 (type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey"
value: "\n\002\010\004\020@"
output_prefix_type: RAW
)
test_output_too_long_raises_error(type_url: "type.googleapis.com/google.crypto.tink.HmacPrfKey" ... ok
test_output_too_long_raises_error3 (type_url: "type.googleapis.com/google.crypto.tink.HkdfPrfKey"
value: "\n\002\010\003\020 "
output_prefix_type: RAW
) (tink.prf._prf_key_manager_test.PrfKeyManagerTest)
tink.prf._prf_key_manager_test.PrfKeyManagerTest.test_output_too_long_raises_error3 (type_url: "type.googleapis.com/google.crypto.tink.HkdfPrfKey"
value: "\n\002\010\003\020 "
output_prefix_type: RAW
)
test_output_too_long_raises_error(type_url: "type.googleapis.com/google.crypto.tink.HkdfPrfKey" ... ok
test_fake_aead_fail_wrong_associated_data (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_aead_fail_wrong_associated_data ... ok
test_fake_aead_fail_wrong_cipertext (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_aead_fail_wrong_cipertext ... ok
test_fake_aead_fail_wrong_primitive (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_aead_fail_wrong_primitive ... ok
test_fake_aead_success (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_aead_success ... ok
test_fake_deterministic_aead_fail_wrong_associated_data (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_deterministic_aead_fail_wrong_associated_data ... ok
test_fake_deterministic_aead_fail_wrong_cipertext (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_deterministic_aead_fail_wrong_cipertext ... ok
test_fake_deterministic_aead_fail_wrong_primitive (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_deterministic_aead_fail_wrong_primitive ... ok
test_fake_deterministic_aead_success (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_deterministic_aead_success ... ok
test_fake_hybrid_fail_wrong_ciphertext (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_hybrid_fail_wrong_ciphertext ... ok
test_fake_hybrid_fail_wrong_context (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_hybrid_fail_wrong_context ... ok
test_fake_hybrid_fail_wrong_dec (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_hybrid_fail_wrong_dec ... ok
test_fake_hybrid_success (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_hybrid_success ... ok
test_fake_mac_fail_wrong_data (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_mac_fail_wrong_data ... ok
test_fake_mac_fail_wrong_primitive (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_mac_fail_wrong_primitive ... ok
test_fake_mac_success (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_mac_success ... ok
test_fake_prf_set_success (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_fake_prf_set_success ... ok
test_tink_root_path (tink.testing.helper_test.HelperTest)
tink.testing.helper_test.HelperTest.test_tink_root_path ... ok
test_close_success (tink.testing.bytes_io_test.BytesIoTest)
tink.testing.bytes_io_test.BytesIoTest.test_close_success ... ok
test_close_twice_success (tink.testing.bytes_io_test.BytesIoTest)
tink.testing.bytes_io_test.BytesIoTest.test_close_twice_success ... ok
test_initial_bytes_success (tink.testing.bytes_io_test.BytesIoTest)
tink.testing.bytes_io_test.BytesIoTest.test_initial_bytes_success ... ok
test_value_before_close_fails (tink.testing.bytes_io_test.BytesIoTest)
tink.testing.bytes_io_test.BytesIoTest.test_value_before_close_fails ... ok
test_with_text_wrapper_success (tink.testing.bytes_io_test.BytesIoTest)
tink.testing.bytes_io_test.BytesIoTest.test_with_text_wrapper_success ... ok
test_not_seekable (tink.testing.bytes_io_test.SlowBytesIOTest)
tink.testing.bytes_io_test.SlowBytesIOTest.test_not_seekable ... ok
test_read (tink.testing.bytes_io_test.SlowBytesIOTest)
tink.testing.bytes_io_test.SlowBytesIOTest.test_read ... ok
test_read_minus_one (tink.testing.bytes_io_test.SlowBytesIOTest)
tink.testing.bytes_io_test.SlowBytesIOTest.test_read_minus_one ... ok
test_read_no_argument (tink.testing.bytes_io_test.SlowBytesIOTest)
tink.testing.bytes_io_test.SlowBytesIOTest.test_read_no_argument ... ok
test_seekable (tink.testing.bytes_io_test.SlowBytesIOTest)
tink.testing.bytes_io_test.SlowBytesIOTest.test_seekable ... ok
test_not_seekable (tink.testing.bytes_io_test.SlowReadableRawBytesTest)
tink.testing.bytes_io_test.SlowReadableRawBytesTest.test_not_seekable ... ok
test_read (tink.testing.bytes_io_test.SlowReadableRawBytesTest)
tink.testing.bytes_io_test.SlowReadableRawBytesTest.test_read ... ok
test_read_minus_one (tink.testing.bytes_io_test.SlowReadableRawBytesTest)
tink.testing.bytes_io_test.SlowReadableRawBytesTest.test_read_minus_one ... ok
test_read_no_argument (tink.testing.bytes_io_test.SlowReadableRawBytesTest)
tink.testing.bytes_io_test.SlowReadableRawBytesTest.test_read_no_argument ... ok
test_readall (tink.testing.bytes_io_test.SlowReadableRawBytesTest)
tink.testing.bytes_io_test.SlowReadableRawBytesTest.test_readall ... ok
test_seekable (tink.testing.bytes_io_test.SlowReadableRawBytesTest)
tink.testing.bytes_io_test.SlowReadableRawBytesTest.test_seekable ... ok
test_add_new_key_new_id (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_add_new_key_new_id ... ok
test_asymmetric_keyset_conversion (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_asymmetric_keyset_conversion ... ok
test_key_rotation (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_key_rotation ... ok
test_keyset_conversion (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_keyset_conversion ... ok
test_keyset_handle_conversion (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_keyset_handle_conversion ... ok
test_legacy_template (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_legacy_template ... ok
test_operation_on_unknown_key_fails (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_operation_on_unknown_key_fails ... ok
test_raw_template (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_raw_template ... ok
test_set_primary_success (tink.testing.keyset_builder_test.KeysetBuilderTest)
tink.testing.keyset_builder_test.KeysetBuilderTest.test_set_primary_success ... ok
test_fake_kms_aead_encrypt_decrypt (tink.testing.fake_kms_test.FakeKmsTest)
tink.testing.fake_kms_test.FakeKmsTest.test_fake_kms_aead_encrypt_decrypt ... ok
test_fake_kms_envelope_encrypt_decrypt (tink.testing.fake_kms_test.FakeKmsTest)
tink.testing.fake_kms_test.FakeKmsTest.test_fake_kms_envelope_encrypt_decrypt ... ok
test_create_hmac_key_template (tink.mac._mac_key_templates_test.MacKeyTemplatesTest)
tink.mac._mac_key_templates_test.MacKeyTemplatesTest.test_create_hmac_key_template ... ok
test_compute_verify_mac0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_compute_verify_mac0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_compute_verify_mac(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_compute_verify_mac1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_compute_verify_mac1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
)
test_compute_verify_mac(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_compute_verify_mac2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_compute_verify_mac2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
)
test_compute_verify_mac(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation4 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation4 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation5 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation5 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation6 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation6 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation7 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation7 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_key_rotation8 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_key_rotation8 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_verify_short_mac_fails0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_verify_short_mac_fails0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_verify_short_mac_fails(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_verify_short_mac_fails1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_verify_short_mac_fails1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
)
test_verify_short_mac_fails(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_verify_short_mac_fails2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_verify_short_mac_fails2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
)
test_verify_short_mac_fails(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_verify_unknown_mac_fails0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_verify_unknown_mac_fails0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_verify_unknown_mac_fails(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_verify_unknown_mac_fails1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_verify_unknown_mac_fails1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: RAW
)
test_verify_unknown_mac_fails(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_verify_unknown_mac_fails2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
) (tink.mac._mac_wrapper_test.MacWrapperTest)
tink.mac._mac_wrapper_test.MacWrapperTest.test_verify_unknown_mac_fails2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: LEGACY
)
test_verify_unknown_mac_fails(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_invalid_params_throw_exception (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_invalid_params_throw_exception ... ok
test_mac_success0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_mac_success0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_mac_success(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_mac_success1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020 \020 "
output_prefix_type: TINK
) (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_mac_success1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020 \020 "
output_prefix_type: TINK
)
test_mac_success(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_mac_success2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\004\020 \020@"
output_prefix_type: TINK
) (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_mac_success2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\004\020 \020@"
output_prefix_type: TINK
)
test_mac_success(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_mac_success3 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\004\020@\020@"
output_prefix_type: TINK
) (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_mac_success3 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\004\020@\020@"
output_prefix_type: TINK
)
test_mac_success(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_mac_wrong0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_mac_wrong0 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_mac_wrong(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_mac_wrong1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020 \020 "
output_prefix_type: TINK
) (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_mac_wrong1 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\003\020 \020 "
output_prefix_type: TINK
)
test_mac_wrong(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_mac_wrong2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\004\020 \020@"
output_prefix_type: TINK
) (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_mac_wrong2 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\004\020 \020@"
output_prefix_type: TINK
)
test_mac_wrong(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_mac_wrong3 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\004\020@\020@"
output_prefix_type: TINK
) (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_mac_wrong3 (type_url: "type.googleapis.com/google.crypto.tink.HmacKey"
value: "\n\004\010\004\020@\020@"
output_prefix_type: TINK
)
test_mac_wrong(type_url: "type.googleapis.com/google.crypto.tink.HmacKey" ... ok
test_new_key_data_hmac (tink.mac._mac_key_manager_test.MacKeyManagerTest)
tink.mac._mac_key_manager_test.MacKeyManagerTest.test_new_key_data_hmac ... ok
test_generate_new (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_generate_new ... ok
test_generate_new_key_id_is_randomized (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_generate_new_key_id_is_randomized ... ok
test_init_fails_on_key_with_unknown_prefix (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_init_fails_on_key_with_unknown_prefix ... ok
test_init_fails_on_key_with_unknown_status (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_init_fails_on_key_with_unknown_status ... ok
test_init_fails_on_key_without_keydata (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_init_fails_on_key_without_keydata ... ok
test_init_fails_on_keyset_with_only_destroyed_keys (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_init_fails_on_keyset_with_only_destroyed_keys ... ok
test_init_fails_on_multiple_primary_keys (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_init_fails_on_multiple_primary_keys ... ok
test_init_fails_without_primary_key_present (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_init_fails_without_primary_key_present ... ok
test_init_with_fake_key_success (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_init_with_fake_key_success ... ok
test_instantiation__raises_error (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_instantiation__raises_error ... ok
test_keyset_info (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_keyset_info ... ok
test_primitive_fails_on_wrong_primitive_class (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_primitive_fails_on_wrong_primitive_class ... ok
test_primitive_success (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_primitive_success ... ok
test_primitive_wrapped_correctly (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_primitive_wrapped_correctly ... ok
test_public_keyset_handle (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_public_keyset_handle ... ok
test_read_empty_keyset_fails (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_read_empty_keyset_fails ... ok
test_read_no_secret (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_read_no_secret ... ok
test_write_encrypted (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_write_encrypted ... ok
test_write_encrypted_with_associated_data (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_write_encrypted_with_associated_data ... ok
test_write_encrypted_with_mismatched_associated_data (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_write_encrypted_with_mismatched_associated_data ... ok
test_write_no_secret (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_write_no_secret ... ok
test_write_raises_error_when_decrypt_not_possible (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_write_raises_error_when_decrypt_not_possible ... ok
test_write_raises_error_when_decrypt_to_wrong_keyset (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_write_raises_error_when_decrypt_to_wrong_keyset ... ok
test_write_raises_error_when_encrypt_failed (tink._keyset_handle_test.KeysetHandleTest)
tink._keyset_handle_test.KeysetHandleTest.test_write_raises_error_when_encrypt_failed ... ok
test_ciphertext_too_short (tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest)
tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest.test_ciphertext_too_short ... ok
test_corrupted_ciphertext (tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest)
tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest.test_corrupted_ciphertext ... ok
test_corrupted_dek (tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest)
tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest.test_corrupted_dek ... ok
test_dek_extraction (tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest)
tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest.test_dek_extraction ... ok
test_encrypt_decrypt (tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest)
tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest.test_encrypt_decrypt ... ok
test_encrypt_decrypt_missing_ad (tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest)
tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest.test_encrypt_decrypt_missing_ad ... ok
test_malformed_dek_length (tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest)
tink.aead._kms_envelope_aead_test.KmsEnvelopeAeadTest.test_malformed_dek_length ... ok
test_encrypt_decrypt_success0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_encrypt_decrypt_success1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020 "
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_encrypt_decrypt_success2 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey"
value: "\020\020"
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success2 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey"
value: "\020\020"
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey" ... ok
test_encrypt_decrypt_success3 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey"
value: "\020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success3 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey"
value: "\020 "
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey" ... ok
test_encrypt_decrypt_success4 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey"
value: "\020\020"
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success4 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey"
value: "\020\020"
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey" ... ok
test_encrypt_decrypt_success5 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey"
value: "\020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success5 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey"
value: "\020 "
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey" ... ok
test_encrypt_decrypt_success6 (type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"
value: "\n\006\n\002\010\020\020\020\022\010\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success6 (type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"
value: "\n\006\n\002\010\020\020\020\022\010\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey" ... ok
test_encrypt_decrypt_success7 (type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"
value: "\n\006\n\002\010\020\020 \022\010\n\004\010\003\020 \020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success7 (type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"
value: "\n\006\n\002\010\020\020 \022\010\n\004\010\003\020 \020 "
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey" ... ok
test_encrypt_decrypt_success8 (type_url: "type.googleapis.com/google.crypto.tink.XChaCha20Poly1305Key"
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_encrypt_decrypt_success8 (type_url: "type.googleapis.com/google.crypto.tink.XChaCha20Poly1305Key"
output_prefix_type: TINK
)
test_encrypt_decrypt_success(type_url: "type.googleapis.com/google.crypto.tink.XChaCha20Poly1305Key" ... ok
test_invalid_decrypt_raises_error0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_invalid_decrypt_raises_error1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020 "
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_invalid_decrypt_raises_error2 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey"
value: "\020\020"
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error2 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey"
value: "\020\020"
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey" ... ok
test_invalid_decrypt_raises_error3 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey"
value: "\020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error3 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey"
value: "\020 "
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesGcmKey" ... ok
test_invalid_decrypt_raises_error4 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey"
value: "\020\020"
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error4 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey"
value: "\020\020"
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey" ... ok
test_invalid_decrypt_raises_error5 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey"
value: "\020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error5 (type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey"
value: "\020 "
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesGcmSivKey" ... ok
test_invalid_decrypt_raises_error6 (type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"
value: "\n\006\n\002\010\020\020\020\022\010\n\004\010\003\020\020\020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error6 (type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"
value: "\n\006\n\002\010\020\020\020\022\010\n\004\010\003\020\020\020 "
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey" ... ok
test_invalid_decrypt_raises_error7 (type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"
value: "\n\006\n\002\010\020\020 \022\010\n\004\010\003\020 \020 "
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error7 (type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"
value: "\n\006\n\002\010\020\020 \022\010\n\004\010\003\020 \020 "
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey" ... ok
test_invalid_decrypt_raises_error8 (type_url: "type.googleapis.com/google.crypto.tink.XChaCha20Poly1305Key"
output_prefix_type: TINK
) (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_decrypt_raises_error8 (type_url: "type.googleapis.com/google.crypto.tink.XChaCha20Poly1305Key"
output_prefix_type: TINK
)
test_invalid_decrypt_raises_error(type_url: "type.googleapis.com/google.crypto.tink.XChaCha20Poly1305Key" ... ok
test_invalid_params_throw_exception_aes_ctr_hmac_aead (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_params_throw_exception_aes_ctr_hmac_aead ... ok
test_invalid_params_throw_exception_aes_eax (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_params_throw_exception_aes_eax ... ok
test_invalid_params_throw_exception_aes_gcm (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_invalid_params_throw_exception_aes_gcm ... ok
test_new_key_data_aes_ctr_hmac_aead (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_new_key_data_aes_ctr_hmac_aead ... ok
test_new_key_data_aes_eax (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_new_key_data_aes_eax ... ok
test_new_key_data_aes_gcm (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_new_key_data_aes_gcm ... ok
test_new_key_data_aes_gcm_siv (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_new_key_data_aes_gcm_siv ... ok
test_new_key_data_xchacha20_poly1305 (tink.aead._aead_key_manager_test.AeadKeyManagerTest)
tink.aead._aead_key_manager_test.AeadKeyManagerTest.test_new_key_data_xchacha20_poly1305 ... ok
test_create_aes_ctr_hmac_aead_key_template (tink.aead._aead_key_templates_test.AeadKeyTemplatesTest)
tink.aead._aead_key_templates_test.AeadKeyTemplatesTest.test_create_aes_ctr_hmac_aead_key_template ... ok
test_create_aes_eax_key_template (tink.aead._aead_key_templates_test.AeadKeyTemplatesTest)
tink.aead._aead_key_templates_test.AeadKeyTemplatesTest.test_create_aes_eax_key_template ... ok
test_create_aes_gcm_key_template (tink.aead._aead_key_templates_test.AeadKeyTemplatesTest)
tink.aead._aead_key_templates_test.AeadKeyTemplatesTest.test_create_aes_gcm_key_template ... ok
test_create_aes_gcm_siv_key_template (tink.aead._aead_key_templates_test.AeadKeyTemplatesTest)
tink.aead._aead_key_templates_test.AeadKeyTemplatesTest.test_create_aes_gcm_siv_key_template ... ok
test_create_kms_aead_key_template (tink.aead._aead_key_templates_test.AeadKeyTemplatesTest)
tink.aead._aead_key_templates_test.AeadKeyTemplatesTest.test_create_kms_aead_key_template ... ok
test_create_kms_envelope_aead_key_template (tink.aead._aead_key_templates_test.AeadKeyTemplatesTest)
tink.aead._aead_key_templates_test.AeadKeyTemplatesTest.test_create_kms_envelope_aead_key_template ... ok
test_decrypt_unknown_ciphertext_fails0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_decrypt_unknown_ciphertext_fails0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
)
test_decrypt_unknown_ciphertext_fails(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_decrypt_unknown_ciphertext_fails1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_decrypt_unknown_ciphertext_fails1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
)
test_decrypt_unknown_ciphertext_fails(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_decrypt_wrong_associated_data_fails0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_decrypt_wrong_associated_data_fails0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
)
test_decrypt_wrong_associated_data_fails(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_decrypt_wrong_associated_data_fails1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_decrypt_wrong_associated_data_fails1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
)
test_decrypt_wrong_associated_data_fails(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_encrypt_decrypt0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
)
test_encrypt_decrypt(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_encrypt_decrypt1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
)
test_encrypt_decrypt(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_encrypt_decrypt_with_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt_with_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_encrypt_decrypt_with_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt_with_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_encrypt_decrypt_with_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt_with_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_encrypt_decrypt_with_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
) (tink.aead._aead_wrapper_test.AeadWrapperTest)
tink.aead._aead_wrapper_test.AeadWrapperTest.test_encrypt_decrypt_with_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey"
value: "\n\002\010\020\020\020"
output_prefix_type: RAW
)
test_encrypt_decrypt_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.AesEaxKey" ... ok
test_bytes_to_num (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_bytes_to_num ... ok
test_num_to_bytes_0 (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_0
test_num_to_bytes_0(0, b'\x00') ... ok
test_num_to_bytes_16909060 (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_16909060
test_num_to_bytes_16909060(16909060, b'\x01\x02\x03\x04') ... ok
test_num_to_bytes_255 (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_255
test_num_to_bytes_255(255, b'\xff') ... ok
test_num_to_bytes_256 (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_256
test_num_to_bytes_256(256, b'\x01\x00') ... ok
test_num_to_bytes_65535 (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_65535
test_num_to_bytes_65535(65535, b'\xff\xff') ... ok
test_num_to_bytes_65536 (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_65536
test_num_to_bytes_65536(65536, b'\x01\x00\x00') ... ok
test_num_to_bytes_65537 (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_65537
test_num_to_bytes_65537(65537, b'\x01\x00\x01') ... ok
test_num_to_bytes_65538 (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_65538
test_num_to_bytes_65538(65538, b'\x01\x00\x02') ... ok
test_num_to_bytes_minus_one_overflow (tink.internal.big_integer_util_test.BigIntegerUtilTest)
tink.internal.big_integer_util_test.BigIntegerUtilTest.test_num_to_bytes_minus_one_overflow ... ok
test_read (tink._keyset_reader_test.BinaryKeysetReaderTest)
tink._keyset_reader_test.BinaryKeysetReaderTest.test_read ... ok
test_read_empty (tink._keyset_reader_test.BinaryKeysetReaderTest)
tink._keyset_reader_test.BinaryKeysetReaderTest.test_read_empty ... ok
test_read_encrypted (tink._keyset_reader_test.BinaryKeysetReaderTest)
tink._keyset_reader_test.BinaryKeysetReaderTest.test_read_encrypted ... ok
test_read_encrypted_empty (tink._keyset_reader_test.BinaryKeysetReaderTest)
tink._keyset_reader_test.BinaryKeysetReaderTest.test_read_encrypted_empty ... ok
test_read_encrypted_invalid (tink._keyset_reader_test.BinaryKeysetReaderTest)
tink._keyset_reader_test.BinaryKeysetReaderTest.test_read_encrypted_invalid ... ok
test_read_encrypted_none (tink._keyset_reader_test.BinaryKeysetReaderTest)
tink._keyset_reader_test.BinaryKeysetReaderTest.test_read_encrypted_none ... ok
test_read_invalid (tink._keyset_reader_test.BinaryKeysetReaderTest)
tink._keyset_reader_test.BinaryKeysetReaderTest.test_read_invalid ... ok
test_read_none (tink._keyset_reader_test.BinaryKeysetReaderTest)
tink._keyset_reader_test.BinaryKeysetReaderTest.test_read_none ... ok
test_read (tink._keyset_reader_test.JsonKeysetReaderTest)
tink._keyset_reader_test.JsonKeysetReaderTest.test_read ... ok
test_read_encrypted (tink._keyset_reader_test.JsonKeysetReaderTest)
tink._keyset_reader_test.JsonKeysetReaderTest.test_read_encrypted ... ok
test_read_encrypted_invalid (tink._keyset_reader_test.JsonKeysetReaderTest)
tink._keyset_reader_test.JsonKeysetReaderTest.test_read_encrypted_invalid ... ok
test_read_invalid (tink._keyset_reader_test.JsonKeysetReaderTest)
tink._keyset_reader_test.JsonKeysetReaderTest.test_read_invalid ... ok
test_from_keyset (tink.cleartext_keyset_handle_test.CleartextKeysetHandleTest)
tink.cleartext_keyset_handle_test.CleartextKeysetHandleTest.test_from_keyset ... ok
test_read_empty_keyset_fails (tink.cleartext_keyset_handle_test.CleartextKeysetHandleTest)
tink.cleartext_keyset_handle_test.CleartextKeysetHandleTest.test_read_empty_keyset_fails ... ok
test_write_read (tink.cleartext_keyset_handle_test.CleartextKeysetHandleTest)
tink.cleartext_keyset_handle_test.CleartextKeysetHandleTest.test_write_read ... ok
test_new_key_data_ecdsa (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_new_key_data_ecdsa ... ok
test_new_public_keyset_handle_fails (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_new_public_keyset_handle_fails ... ok
test_sign_verify_success0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_success1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\002\020\003\030\002"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\002\020\003\030\002"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_success10 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey"
value: "\n\006\010\003\020\003\030 \020\200\030\032\003\001\000\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success10 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey"
value: "\n\006\010\003\020\003\030 \020\200\030\032\003\001\000\001"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey" ... ok
test_sign_verify_success11 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey"
value: "\n\006\010\004\020\004\030@\020\200 \032\003\001\000\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success11 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey"
value: "\n\006\010\004\020\004\030@\020\200 \032\003\001\000\001"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey" ... ok
test_sign_verify_success2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\003\030\002"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\003\030\002"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_success3 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\004\030\002"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success3 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\004\030\002"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_success4 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success4 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\001"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_success5 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\002\020\003\030\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success5 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\002\020\003\030\001"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_success6 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\004\030\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success6 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\004\030\001"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_success7 (type_url: "type.googleapis.com/google.crypto.tink.Ed25519PrivateKey"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success7 (type_url: "type.googleapis.com/google.crypto.tink.Ed25519PrivateKey"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.Ed25519PrivateKey" ... ok
test_sign_verify_success8 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey"
value: "\n\002\010\003\020\200\030\032\003\001\000\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success8 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey"
value: "\n\002\010\003\020\200\030\032\003\001\000\001"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey" ... ok
test_sign_verify_success9 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey"
value: "\n\002\010\004\020\200 \032\003\001\000\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_sign_verify_success9 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey"
value: "\n\002\010\004\020\200 \032\003\001\000\001"
output_prefix_type: TINK
)
test_sign_verify_success(type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey" ... ok
test_verify_wrong_fails0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_wrong_fails1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\003\030\002"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\003\030\002"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_wrong_fails10 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey"
value: "\n\002\010\004\020\200 \032\003\001\000\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails10 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey"
value: "\n\002\010\004\020\200 \032\003\001\000\001"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey" ... ok
test_verify_wrong_fails11 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey"
value: "\n\006\010\003\020\003\030 \020\200\030\032\003\001\000\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails11 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey"
value: "\n\006\010\003\020\003\030 \020\200\030\032\003\001\000\001"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey" ... ok
test_verify_wrong_fails12 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey"
value: "\n\006\010\004\020\004\030@\020\200 \032\003\001\000\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails12 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey"
value: "\n\006\010\004\020\004\030@\020\200 \032\003\001\000\001"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey" ... ok
test_verify_wrong_fails2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\002\020\003\030\002"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\002\020\003\030\002"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_wrong_fails3 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\004\030\002"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails3 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\004\030\002"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_wrong_fails4 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails4 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\001"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_wrong_fails5 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\003\030\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails5 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\003\030\001"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_wrong_fails6 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\002\020\003\030\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails6 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\002\020\003\030\001"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_wrong_fails7 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\004\030\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails7 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\004\020\004\030\001"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_wrong_fails8 (type_url: "type.googleapis.com/google.crypto.tink.Ed25519PrivateKey"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails8 (type_url: "type.googleapis.com/google.crypto.tink.Ed25519PrivateKey"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.Ed25519PrivateKey" ... ok
test_verify_wrong_fails9 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey"
value: "\n\002\010\003\020\200\030\032\003\001\000\001"
output_prefix_type: TINK
) (tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest)
tink.signature._signature_key_manager_test.PublicKeySignKeyManagerTest.test_verify_wrong_fails9 (type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey"
value: "\n\002\010\003\020\200\030\032\003\001\000\001"
output_prefix_type: TINK
)
test_verify_wrong_fails(type_url: "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey" ... ok
test_sign_verify0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
)
test_sign_verify(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
)
test_sign_verify(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
)
test_sign_verify(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation4 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation4 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation5 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation5 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation6 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation6 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation7 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation7 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_sign_verify_with_key_rotation8 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_sign_verify_with_key_rotation8 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
)
test_sign_verify_with_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_fails_on_unknown_signature0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_verify_fails_on_unknown_signature0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
)
test_verify_fails_on_unknown_signature(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_fails_on_unknown_signature1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_verify_fails_on_unknown_signature1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
)
test_verify_fails_on_unknown_signature(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_fails_on_unknown_signature2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_verify_fails_on_unknown_signature2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
)
test_verify_fails_on_unknown_signature(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_fails_on_wrong_data0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_verify_fails_on_wrong_data0 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: TINK
)
test_verify_fails_on_wrong_data(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_fails_on_wrong_data1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_verify_fails_on_wrong_data1 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: LEGACY
)
test_verify_fails_on_wrong_data(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_verify_fails_on_wrong_data2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
) (tink.signature._signature_wrapper_test.SignatureWrapperTest)
tink.signature._signature_wrapper_test.SignatureWrapperTest.test_verify_fails_on_wrong_data2 (type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey"
value: "\022\006\010\003\020\002\030\002"
output_prefix_type: RAW
)
test_verify_fails_on_wrong_data(type_url: "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" ... ok
test_aead_encrypt_decrypt (tink.tink_config_test.TinkConfigTest)
tink.tink_config_test.TinkConfigTest.test_aead_encrypt_decrypt ... ok
test_deterministic_aead_wrapper_is_correctly_registered (tink.tink_config_test.TinkConfigTest)
tink.tink_config_test.TinkConfigTest.test_deterministic_aead_wrapper_is_correctly_registered ... ok
test_hybrid_encrypt_decrypt (tink.tink_config_test.TinkConfigTest)
tink.tink_config_test.TinkConfigTest.test_hybrid_encrypt_decrypt ... ok
test_mac_compute_verify (tink.tink_config_test.TinkConfigTest)
tink.tink_config_test.TinkConfigTest.test_mac_compute_verify ... ok
test_prf_compute (tink.tink_config_test.TinkConfigTest)
tink.tink_config_test.TinkConfigTest.test_prf_compute ... ok
test_signatures_sign_verify (tink.tink_config_test.TinkConfigTest)
tink.tink_config_test.TinkConfigTest.test_signatures_sign_verify ... ok
test_streaming_aead_encrypt_decrypt (tink.tink_config_test.TinkConfigTest)
tink.tink_config_test.TinkConfigTest.test_streaming_aead_encrypt_decrypt ... ok
test_mac_success_JWT_HS256 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_mac_success_JWT_HS256
test_mac_success_JWT_HS256(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_mac_success_JWT_HS256_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_mac_success_JWT_HS256_RAW
test_mac_success_JWT_HS256_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_mac_success_JWT_HS384 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_mac_success_JWT_HS384
test_mac_success_JWT_HS384(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_mac_success_JWT_HS384_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_mac_success_JWT_HS384_RAW
test_mac_success_JWT_HS384_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_mac_success_JWT_HS512 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_mac_success_JWT_HS512
test_mac_success_JWT_HS512(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_mac_success_JWT_HS512_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_mac_success_JWT_HS512_RAW
test_mac_success_JWT_HS512_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_new_keydata_primitive_success_JWT_ES256 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_ES256
test_new_keydata_primitive_success_JWT_ES256(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_ES256_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_ES256_RAW
test_new_keydata_primitive_success_JWT_ES256_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_ES384 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_ES384
test_new_keydata_primitive_success_JWT_ES384(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_ES384_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_ES384_RAW
test_new_keydata_primitive_success_JWT_ES384_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_ES512 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_ES512
test_new_keydata_primitive_success_JWT_ES512(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_ES512_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_ES512_RAW
test_new_keydata_primitive_success_JWT_ES512_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_PS256_2048_F4 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_PS256_2048_F4
test_new_keydata_primitive_success_JWT_PS256_2048_F4(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_PS256_2048_F4_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_PS256_2048_F4_RAW
test_new_keydata_primitive_success_JWT_PS256_2048_F4_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_PS256_3072_F4 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_PS256_3072_F4
test_new_keydata_primitive_success_JWT_PS256_3072_F4(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_PS256_3072_F4_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_PS256_3072_F4_RAW
test_new_keydata_primitive_success_JWT_PS256_3072_F4_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_PS384_3072_F4 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_PS384_3072_F4
test_new_keydata_primitive_success_JWT_PS384_3072_F4(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_PS384_3072_F4_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_PS384_3072_F4_RAW
test_new_keydata_primitive_success_JWT_PS384_3072_F4_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_PS512_4096_F4 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_PS512_4096_F4
test_new_keydata_primitive_success_JWT_PS512_4096_F4(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_PS512_4096_F4_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_PS512_4096_F4_RAW
test_new_keydata_primitive_success_JWT_PS512_4096_F4_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_new_keydata_primitive_success_JWT_RS256_2048_F4 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_RS256_2048_F4
test_new_keydata_primitive_success_JWT_RS256_2048_F4(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_new_keydata_primitive_success_JWT_RS256_2048_F4_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_RS256_2048_F4_RAW
test_new_keydata_primitive_success_JWT_RS256_2048_F4_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_new_keydata_primitive_success_JWT_RS256_3072_F4 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_RS256_3072_F4
test_new_keydata_primitive_success_JWT_RS256_3072_F4(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_new_keydata_primitive_success_JWT_RS256_3072_F4_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_RS256_3072_F4_RAW
test_new_keydata_primitive_success_JWT_RS256_3072_F4_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_new_keydata_primitive_success_JWT_RS384_3072_F4 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_RS384_3072_F4
test_new_keydata_primitive_success_JWT_RS384_3072_F4(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_new_keydata_primitive_success_JWT_RS384_3072_F4_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_RS384_3072_F4_RAW
test_new_keydata_primitive_success_JWT_RS384_3072_F4_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_new_keydata_primitive_success_JWT_RS512_4096_F4 (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_RS512_4096_F4
test_new_keydata_primitive_success_JWT_RS512_4096_F4(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_new_keydata_primitive_success_JWT_RS512_4096_F4_RAW (tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest)
tink.jwt._jwt_key_templates_test.JwtKeyTemplatesTest.test_new_keydata_primitive_success_JWT_RS512_4096_F4_RAW
test_new_keydata_primitive_success_JWT_RS512_4096_F4_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_jwt_mac_from_keyset_without_primary_fails (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_jwt_mac_from_keyset_without_primary_fails ... ok
test_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: RAW
) (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: RAW
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: TINK
) (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: TINK
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: RAW
) (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: RAW
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: TINK
) (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey"
value: "\020\001\030 "
output_prefix_type: TINK
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_legacy_key_fails (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_legacy_key_fails ... ok
test_legacy_non_primary_key_fails (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_legacy_non_primary_key_fails ... ok
test_only_tink_output_prefix_type_encodes_a_kid_header (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_only_tink_output_prefix_type_encodes_a_kid_header ... ok
test_raw_output_prefix_type_encodes_a_custom_kid_header (tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest)
tink.jwt._jwt_mac_wrapper_test.JwtMacWrapperTest.test_raw_output_prefix_type_encodes_a_custom_kid_header ... ok
test_audiences (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_audiences ... ok
test_custom_claim_using_registered_name_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_custom_claim_using_registered_name_fails ... ok
test_custom_claims (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_custom_claims ... ok
test_datetime (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_datetime ... ok
test_empty_access_raises_error (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_empty_access_raises_error ... ok
test_empty_audiences (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_empty_audiences ... ok
test_empty_custom_claim_names (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_empty_custom_claim_names ... ok
test_empty_has_returns_false (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_empty_has_returns_false ... ok
test_exp_to_payload (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_exp_to_payload ... ok
test_expiration (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_expiration ... ok
test_float_exp_to_payload (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_float_exp_to_payload ... ok
test_from_payload_with_exp_expiration_success (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_exp_expiration_success ... ok
test_from_payload_with_infinity_expiration_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_infinity_expiration_fails ... ok
test_from_payload_with_invalid_utf16 (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_invalid_utf16 ... ok
test_from_payload_with_large_expiration_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_large_expiration_fails ... ok
test_from_payload_with_negative_expiration_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_negative_expiration_fails ... ok
test_from_payload_with_utf16_surrogate (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_utf16_surrogate ... ok
test_from_payload_with_wrong_expiration_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_wrong_expiration_fails ... ok
test_from_payload_with_wrong_issued_at_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_wrong_issued_at_fails ... ok
test_from_payload_with_wrong_issuer_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_wrong_issuer_fails ... ok
test_from_payload_with_wrong_jwt_id_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_wrong_jwt_id_fails ... ok
test_from_payload_with_wrong_not_before_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_wrong_not_before_fails ... ok
test_from_payload_with_wrong_subject_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_payload_with_wrong_subject_fails ... ok
test_from_to_payload (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_to_payload ... ok
test_from_to_payload_with_string_audience (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_from_to_payload_with_string_audience ... ok
test_issued_at (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_issued_at ... ok
test_issuer (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_issuer ... ok
test_jwt_id (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_jwt_id ... ok
test_large_timestamps_success (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_large_timestamps_success ... ok
test_modification (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_modification ... ok
test_negative_expiration_fails (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_negative_expiration_fails ... ok
test_not_before (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_not_before ... ok
test_null_custom_claim (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_null_custom_claim ... ok
test_payload (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_payload ... ok
test_registered_name_as_custom_claim_is_invalid (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_registered_name_as_custom_claim_is_invalid ... ok
test_rejects_naive_time (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_rejects_naive_time ... ok
test_round_down_expiration_with_fraction (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_round_down_expiration_with_fraction ... ok
test_round_down_issued_at_with_fraction (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_round_down_issued_at_with_fraction ... ok
test_round_down_not_before_with_fraction (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_round_down_not_before_with_fraction ... ok
test_string_audiences (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_string_audiences ... ok
test_subject (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_subject ... ok
test_too_large_timestamps_fail (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_too_large_timestamps_fail ... ok
test_type_header (tink.jwt._raw_jwt_test.RawJwtTest)
tink.jwt._raw_jwt_test.RawJwtTest.test_type_header ... ok
test_create_ecdsa_handle_with_invalid_algorithm_fails (tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest)
tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest.test_create_ecdsa_handle_with_invalid_algorithm_fails ... ok
test_create_sign_primitive_with_invalid_algorithm_fails (tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest)
tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest.test_create_sign_primitive_with_invalid_algorithm_fails ... ok
test_create_sign_verify (tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest)
tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest.test_create_sign_verify ... ok
test_create_sign_verify_with_type_header (tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest)
tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest.test_create_sign_verify_with_type_header ... ok
test_create_verify_primitive_with_invalid_algorithm_fails (tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest)
tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest.test_create_verify_primitive_with_invalid_algorithm_fails ... ok
test_verify_with_other_key_fails (tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest)
tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest.test_verify_with_other_key_fails ... ok
test_weird_tokens_with_valid_signatures (tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest)
tink.jwt._jwt_signature_key_manager_test.JwtSignatureKeyManagerTest.test_weird_tokens_with_valid_signatures ... ok
test_json_dumps (tink.jwt._json_util_test.JwtFormatTest)
tink.jwt._json_util_test.JwtFormatTest.test_json_dumps ... ok
test_json_loads (tink.jwt._json_util_test.JwtFormatTest)
tink.jwt._json_util_test.JwtFormatTest.test_json_loads ... ok
test_json_loads_recursion (tink.jwt._json_util_test.JwtFormatTest)
tink.jwt._json_util_test.JwtFormatTest.test_json_loads_recursion ... ok
test_json_loads_with_invalid_utf16 (tink.jwt._json_util_test.JwtFormatTest)
tink.jwt._json_util_test.JwtFormatTest.test_json_loads_with_invalid_utf16 ... ok
test_basic (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_basic ... ok
test_fixed_signed_compact (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_fixed_signed_compact ... ok
test_invalid_signed_compact_extra . (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_invalid_signed_compact_extra .
test_invalid_signed_compact_extra .('eyJhbGciOiJIUzI1NiJ9.e30.abc.') ... ok
test_invalid_signed_compact_invalid_header_encoding (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_invalid_signed_compact_invalid_header_encoding
test_invalid_signed_compact_invalid_header_encoding('eyJhbGciOiJIUzI1NiJ9?.e30.abc') ... ok
test_invalid_signed_compact_invalid_mac_encoding (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_invalid_signed_compact_invalid_mac_encoding
test_invalid_signed_compact_invalid_mac_encoding('eyJhbGciOiJIUzI1NiJ9.e30.abc?') ... ok
test_invalid_signed_compact_invalid_payload_encoding (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_invalid_signed_compact_invalid_payload_encoding
test_invalid_signed_compact_invalid_payload_encoding('eyJhbGciOiJIUzI1NiJ9.e30?.abc') ... ok
test_invalid_signed_compact_modified_header (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_invalid_signed_compact_modified_header
test_invalid_signed_compact_modified_header('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk') ... ok
test_invalid_signed_compact_modified_payload (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_invalid_signed_compact_modified_payload
test_invalid_signed_compact_modified_payload('eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJqb2UiLCJleHAiOjEzMDA4MTkzODEsImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk') ... ok
test_invalid_signed_compact_modified_signature (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_invalid_signed_compact_modified_signature
test_invalid_signed_compact_modified_signature('eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXi') ... ok
test_invalid_signed_compact_no_mac (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_invalid_signed_compact_no_mac
test_invalid_signed_compact_no_mac('eyJhbGciOiJIUzI1NiJ9.e30') ... ok
test_new_keydata_primitive_success_JWT_HS256 (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_new_keydata_primitive_success_JWT_HS256
test_new_keydata_primitive_success_JWT_HS256(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_new_keydata_primitive_success_JWT_HS384 (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_new_keydata_primitive_success_JWT_HS384
test_new_keydata_primitive_success_JWT_HS384(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_new_keydata_primitive_success_JWT_HS512 (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_new_keydata_primitive_success_JWT_HS512
test_new_keydata_primitive_success_JWT_HS512(type_url: "type.googleapis.com/google.crypto.tink.JwtHmacKey" ... ok
test_weird_tokens_with_valid_macs (tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest)
tink.jwt._jwt_hmac_key_manager_test.JwtHmacKeyManagerTest.test_weird_tokens_with_valid_macs ... ok
test_interesting_error (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_interesting_error ... ok
test_jwt_mac_from_keyset_without_primary_fails (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_jwt_mac_from_keyset_without_primary_fails ... ok
test_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: RAW
) (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_key_rotation0 (type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: RAW
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: TINK
) (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_key_rotation1 (type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: RAW
, type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: TINK
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: RAW
) (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_key_rotation2 (type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: RAW
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: TINK
) (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_key_rotation3 (type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: TINK
, type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey"
value: "\020\001"
output_prefix_type: TINK
)
test_key_rotation(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_legacy_non_primary_key_fails (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_legacy_non_primary_key_fails ... ok
test_legacy_template_fails (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_legacy_template_fails ... ok
test_only_tink_output_prefix_type_encodes_a_kid_header (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_only_tink_output_prefix_type_encodes_a_kid_header ... ok
test_raw_key_with_custom_kid_header_JWT_ES256_RAW (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_raw_key_with_custom_kid_header_JWT_ES256_RAW
test_raw_key_with_custom_kid_header_JWT_ES256_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtEcdsaPrivateKey" ... ok
test_raw_key_with_custom_kid_header_JWT_PS256_RAW (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_raw_key_with_custom_kid_header_JWT_PS256_RAW
test_raw_key_with_custom_kid_header_JWT_PS256_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPrivateKey" ... ok
test_raw_key_with_custom_kid_header_JWT_RS256_RAW (tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest)
tink.jwt._jwt_signature_wrappers_test.JwtSignatureWrapperTest.test_raw_key_with_custom_kid_header_JWT_RS256_RAW
test_raw_key_with_custom_kid_header_JWT_RS256_RAW(type_url: "type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PrivateKey" ... ok
test_custom_claims (tink.jwt._verified_jwt_test.VerifiedJwtTest)
tink.jwt._verified_jwt_test.VerifiedJwtTest.test_custom_claims ... ok
test_empty (tink.jwt._verified_jwt_test.VerifiedJwtTest)
tink.jwt._verified_jwt_test.VerifiedJwtTest.test_empty ... ok
test_full (tink.jwt._verified_jwt_test.VerifiedJwtTest)
tink.jwt._verified_jwt_test.VerifiedJwtTest.test_full ... ok
test_convert_from_jwt_key_ES256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_ES256_RAW
test_convert_from_jwt_key_ES256_RAW('{"primaryKeyId":282600252,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtEcdsaPublicKey","value":"EAEaIBDPI66hjLHvjxmUJ2nyHIBDmdOtQ4gPsvWgYYgZ0gygIiBTEK0rTACpAb97m+mvtJKAk0q3mHjPcUZm0C4EueDW4Q==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":282600252,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"EC","crv":"P-256","x":"EM8jrqGMse-PGZQnafIcgEOZ061DiA-y9aBhiBnSDKA","y":"UxCtK0wAqQG_e5vpr7SSgJNKt5h4z3FGZtAuBLng1uE","use":"sig","alg":"ES256","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_ES256_TINK (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_ES256_TINK
test_convert_from_jwt_key_ES256_TINK('{"primaryKeyId":282600252,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtEcdsaPublicKey","value":"EAEaIBDPI66hjLHvjxmUJ2nyHIBDmdOtQ4gPsvWgYYgZ0gygIiBTEK0rTACpAb97m+mvtJKAk0q3mHjPcUZm0C4EueDW4Q==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":282600252,"outputPrefixType":"TINK"}]}', '{"keys":[{"kty":"EC","crv":"P-256","x":"EM8jrqGMse-PGZQnafIcgEOZ061DiA-y9aBhiBnSDKA","y":"UxCtK0wAqQG_e5vpr7SSgJNKt5h4z3FGZtAuBLng1uE","use":"sig","alg":"ES256","key_ops":["verify"],"kid":"ENgjPA"}]}') ... ok
test_convert_from_jwt_key_ES384_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_ES384_RAW
test_convert_from_jwt_key_ES384_RAW('{"primaryKeyId":456087424,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtEcdsaPublicKey","value":"EAIaMQDSjvWihoKGmr4nlDuI/KkvuPvEZr+B4bU0MuXQQXgyNMGApFm2iTeotv7LCSsG3mQiMEHIMGx4wa+Y8yeJQWMiSpukpPM7jP9GqaykZQQ2GY/NLg/n9+BJtntgvFhG5gWLTg==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":456087424,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"EC","crv":"P-384","x":"ANKO9aKGgoaavieUO4j8qS-4-8Rmv4HhtTQy5dBBeDI0wYCkWbaJN6i2_ssJKwbeZA","y":"QcgwbHjBr5jzJ4lBYyJKm6Sk8zuM_0aprKRlBDYZj80uD-f34Em2e2C8WEbmBYtO","use":"sig","alg":"ES384","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_ES512_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_ES512_RAW
test_convert_from_jwt_key_ES512_RAW('{"primaryKeyId":1570200439,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtEcdsaPublicKey","value":"EAMaQgEV3nweRej6Z1/aPTqCkc1tQla5eVI68+qfwR1kB/wXCuYCB5otarhomUt64Fah/8Tjf0WJHMZyFr86RUitiRQm1SJCATht/NOX8RcbaEr1MaH+0BFTaepvpTzSfQ04C2P8VCoURB3GeVKk4VQh8O/KLSYfX+58bqEnaZ0G7W9qjHa2ols2","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":1570200439,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"EC","crv":"P-521","x":"ARXefB5F6PpnX9o9OoKRzW1CVrl5Ujrz6p_BHWQH_BcK5gIHmi1quGiZS3rgVqH_xON_RYkcxnIWvzpFSK2JFCbV","y":"ATht_NOX8RcbaEr1MaH-0BFTaepvpTzSfQ04C2P8VCoURB3GeVKk4VQh8O_KLSYfX-58bqEnaZ0G7W9qjHa2ols2","use":"sig","alg":"ES512","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_PS256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_PS256_RAW
test_convert_from_jwt_key_PS256_RAW('{"primaryKeyId":1508587714,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPublicKey","value":"EAEagQMAj7Eud2n5G11qsdtjpgGWjW4cAKalSE1atm7d+Cp8biRX9wbmLJRMUvoO2j7Sp9Szx1TMmksY2Ugf/7+Nv9fY7vBbmxOiBQVTvikWn0FgPwhFTXTz+9fhGjM6E6sdSOUzjM6nsPulKqOQ8Aed+TLIlgvwuSTF4B5d6QkZWBymq7My6vV+epzWnoLpVDzCHh+c35r81Pyrj6tiTPQzPLN2ixeanclMjx8deNwlak3vwBdMDgwQ63rVCo2eWDS/BYK4rG22luSTDVfQVHU1NXlwXEnb/eONFSF6ZbD6JXFMT3uHT4okTOrX4Kd34stbPIUtZFUy3XiSeCGtghBXLMf/ge113Q9WDJ+RN1Xa4vgHJCO0+VO+cAugVkiu9UgsPP8o/r7tA2aP/Ps8EHYa1IaZg75vnrMZPvsTH7WG2SjSgW9GLLsbNJLFFqLFMwPuZPe8BbgvimPdStXasX/PN6DLKoK2PaT0I+iLK9mRi1Z4OjFbl9KAZXXElhAQTzrEI2adIgMBAAE=","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":1508587714,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"RSA","n":"AI-xLndp-RtdarHbY6YBlo1uHACmpUhNWrZu3fgqfG4kV_cG5iyUTFL6Dto-0qfUs8dUzJpLGNlIH_-_jb_X2O7wW5sTogUFU74pFp9BYD8IRU108_vX4RozOhOrHUjlM4zOp7D7pSqjkPAHnfkyyJYL8LkkxeAeXekJGVgcpquzMur1fnqc1p6C6VQ8wh4fnN-a_NT8q4-rYkz0MzyzdosXmp3JTI8fHXjcJWpN78AXTA4MEOt61QqNnlg0vwWCuKxttpbkkw1X0FR1NTV5cFxJ2_3jjRUhemWw-iVxTE97h0-KJEzq1-Cnd-LLWzyFLWRVMt14knghrYIQVyzH_4Htdd0PVgyfkTdV2uL4ByQjtPlTvnALoFZIrvVILDz_KP6-7QNmj_z7PBB2GtSGmYO-b56zGT77Ex-1htko0oFvRiy7GzSSxRaixTMD7mT3vAW4L4pj3UrV2rF_zzegyyqCtj2k9CPoiyvZkYtWeDoxW5fSgGV1xJYQEE86xCNmnQ","e":"AQAB","use":"sig","alg":"PS256","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_PS256_TINK (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_PS256_TINK
test_convert_from_jwt_key_PS256_TINK('{"primaryKeyId":1508587714,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPublicKey","value":"EAEagQMAj7Eud2n5G11qsdtjpgGWjW4cAKalSE1atm7d+Cp8biRX9wbmLJRMUvoO2j7Sp9Szx1TMmksY2Ugf/7+Nv9fY7vBbmxOiBQVTvikWn0FgPwhFTXTz+9fhGjM6E6sdSOUzjM6nsPulKqOQ8Aed+TLIlgvwuSTF4B5d6QkZWBymq7My6vV+epzWnoLpVDzCHh+c35r81Pyrj6tiTPQzPLN2ixeanclMjx8deNwlak3vwBdMDgwQ63rVCo2eWDS/BYK4rG22luSTDVfQVHU1NXlwXEnb/eONFSF6ZbD6JXFMT3uHT4okTOrX4Kd34stbPIUtZFUy3XiSeCGtghBXLMf/ge113Q9WDJ+RN1Xa4vgHJCO0+VO+cAugVkiu9UgsPP8o/r7tA2aP/Ps8EHYa1IaZg75vnrMZPvsTH7WG2SjSgW9GLLsbNJLFFqLFMwPuZPe8BbgvimPdStXasX/PN6DLKoK2PaT0I+iLK9mRi1Z4OjFbl9KAZXXElhAQTzrEI2adIgMBAAE=","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":1508587714,"outputPrefixType":"TINK"}]}', '{"keys":[{"kty":"RSA","n":"AI-xLndp-RtdarHbY6YBlo1uHACmpUhNWrZu3fgqfG4kV_cG5iyUTFL6Dto-0qfUs8dUzJpLGNlIH_-_jb_X2O7wW5sTogUFU74pFp9BYD8IRU108_vX4RozOhOrHUjlM4zOp7D7pSqjkPAHnfkyyJYL8LkkxeAeXekJGVgcpquzMur1fnqc1p6C6VQ8wh4fnN-a_NT8q4-rYkz0MzyzdosXmp3JTI8fHXjcJWpN78AXTA4MEOt61QqNnlg0vwWCuKxttpbkkw1X0FR1NTV5cFxJ2_3jjRUhemWw-iVxTE97h0-KJEzq1-Cnd-LLWzyFLWRVMt14knghrYIQVyzH_4Htdd0PVgyfkTdV2uL4ByQjtPlTvnALoFZIrvVILDz_KP6-7QNmj_z7PBB2GtSGmYO-b56zGT77Ex-1htko0oFvRiy7GzSSxRaixTMD7mT3vAW4L4pj3UrV2rF_zzegyyqCtj2k9CPoiyvZkYtWeDoxW5fSgGV1xJYQEE86xCNmnQ","e":"AQAB","use":"sig","alg":"PS256","key_ops":["verify"],"kid":"Wes4wg"}]}') ... ok
test_convert_from_jwt_key_PS384_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_PS384_RAW
test_convert_from_jwt_key_PS384_RAW('{"primaryKeyId":1042230435,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPublicKey","value":"EAIagQMAv6a0OergWYmY1k6l6vx6Of5+RxCeeQ9jMTXQyvO0GCgMDExxtqVS8S25ehZ5LNDIiGjhE3v2++D7QEjnzOC5UqI1ZwPxUBSrOaf5oDbJ9vBc2c7wDyJhRV8UobQSpzunD4kXypVhytjwRdiP61vG0C/eL0x+LijtM/XVee1Y+5mWrypVrB6EHKtdkMx2WIYNpsFOForFrr6JzLbWfDRWoqbCXKYivnw+CSE38ddW1XsrAT76E2Vf+womuwyBbkjLaiWvNxNFBTap2IaBLKAni6x7pqYCeu1n9eMUi41oz9QM8xfOvpH+wubc2PjwyTsb1FDTLnhV36tQLTVGdQdCDMF2Z8Agrnio3n1SFjSbYgFyVtpCwFKM2Z0zfO7k9jVbYYkzglzkJfp/lQrsuWqe4CVJjFE1H4BxcU7L0j8755kGJI08h1b7LPgqJcPgtHjcqbxHFU2yOf7mNGlW7YTnoQBO0StzQUk7kEw3X0+niEwX/L8jqW4YMbxrGdAfkTnPIgMBAAE=","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":1042230435,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"RSA","n":"AL-mtDnq4FmJmNZOper8ejn-fkcQnnkPYzE10MrztBgoDAxMcbalUvEtuXoWeSzQyIho4RN79vvg-0BI58zguVKiNWcD8VAUqzmn-aA2yfbwXNnO8A8iYUVfFKG0Eqc7pw-JF8qVYcrY8EXYj-tbxtAv3i9Mfi4o7TP11XntWPuZlq8qVawehByrXZDMdliGDabBThaKxa6-icy21nw0VqKmwlymIr58PgkhN_HXVtV7KwE--hNlX_sKJrsMgW5Iy2olrzcTRQU2qdiGgSygJ4use6amAnrtZ_XjFIuNaM_UDPMXzr6R_sLm3Nj48Mk7G9RQ0y54Vd-rUC01RnUHQgzBdmfAIK54qN59UhY0m2IBclbaQsBSjNmdM3zu5PY1W2GJM4Jc5CX6f5UK7LlqnuAlSYxRNR-AcXFOy9I_O-eZBiSNPIdW-yz4KiXD4LR43Km8RxVNsjn-5jRpVu2E56EATtErc0FJO5BMN19Pp4hMF_y_I6luGDG8axnQH5E5zw","e":"AQAB","use":"sig","alg":"PS384","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_PS512_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_PS512_RAW
test_convert_from_jwt_key_PS512_RAW('{"primaryKeyId":257081135,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPublicKey","value":"EAMagQQAnOUQvBwNRgeI3zlzIhVo4NzFVCsQn9hd2EIclz6cWBRMFr4EX5lXLK0StSIB7EQP4ciHa+vr59sOgMFMC2kiXRUXNtl99QhGwH0YjbWeDC50PKEAjH1hhhPgSw2dFcUVs4jbScDrwNn1sQ8rkgSNczvQNpV1MtBhS/CC1PxVF88JaejG2zr+unoFlw7xnqxBWMzNrMHZHwqga2vL3inSbvA/RGQjnE2DzQSwZkXthGSwYBjOYbGawMN4onkAx/myHMyTg/TLAqG9GUyB0DVelvVoGZG/QJBY2Fp2FlpOQRKeBr6pC7Lk8zZL4GJk264KoOpG8v1t7PveN+STIdTE2D548K+GDOvsvrO4ZhofS/iqN9xLucuU1HkqKUqyLvMxsWum8Zhp7zinFdBnDOgeheOHUgN/iwjupk6u1Svt+RWNJsfb2l0jrvzf0cRMbPeLZRmpDwBxBvXWo61u6uaBEVb+ooZ6K5+hx3Rld7wXktjYIZzHqUr39P5yTw28b8Y2dPFWR4vwr2/0zBxcDmTRRtQ7vPOtZPD0/LVIXkgbBiLILpycnucWt9Lq9Hc62KFiTQOAuuOxz7ObBegXjnFupiZZ9PyzO5WgT9lRpH7U7tzGLAjV+AUpjH6HA1o6bRLKOHFBPS+I9IqAYb/RpF6M/6hCmC2Rz64yYzR3y4vHKGMiAwEAAQ==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":257081135,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"RSA","n":"AJzlELwcDUYHiN85cyIVaODcxVQrEJ_YXdhCHJc-nFgUTBa-BF-ZVyytErUiAexED-HIh2vr6-fbDoDBTAtpIl0VFzbZffUIRsB9GI21ngwudDyhAIx9YYYT4EsNnRXFFbOI20nA68DZ9bEPK5IEjXM70DaVdTLQYUvwgtT8VRfPCWnoxts6_rp6BZcO8Z6sQVjMzazB2R8KoGtry94p0m7wP0RkI5xNg80EsGZF7YRksGAYzmGxmsDDeKJ5AMf5shzMk4P0ywKhvRlMgdA1Xpb1aBmRv0CQWNhadhZaTkESnga-qQuy5PM2S-BiZNuuCqDqRvL9bez73jfkkyHUxNg-ePCvhgzr7L6zuGYaH0v4qjfcS7nLlNR5KilKsi7zMbFrpvGYae84pxXQZwzoHoXjh1IDf4sI7qZOrtUr7fkVjSbH29pdI67839HETGz3i2UZqQ8AcQb11qOtburmgRFW_qKGeiufocd0ZXe8F5LY2CGcx6lK9_T-ck8NvG_GNnTxVkeL8K9v9MwcXA5k0UbUO7zzrWTw9Py1SF5IGwYiyC6cnJ7nFrfS6vR3OtihYk0DgLrjsc-zmwXoF45xbqYmWfT8szuVoE_ZUaR-1O7cxiwI1fgFKYx-hwNaOm0SyjhxQT0viPSKgGG_0aRejP-oQpgtkc-uMmM0d8uLxyhj","e":"AQAB","use":"sig","alg":"PS512","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_RS256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_RS256_RAW
test_convert_from_jwt_key_RS256_RAW('{"primaryKeyId":482168993,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAEagQIAkspk37lGBqXmPPq2CL5KdDeRx7xFiTadpL3jc4nXaqftCtpM6qExfrc2JLaIsnwpwfGMClfe/alIs2GrT9fpM8oDeCccvC39DzZhsSFnAELggi3hnWNKRLfSV0UJzBI+5hZ6ifUsv8W8mSHKlsVMmvOfC2P5+l72qTwN6Le3hy6CxFp5s9pw011B7J3PU65sty6GI9sehB2B/n7nfiWw9YN5++pfwyoitzoMoVKOOpj7fFq88f8ArpC7kR1SBTe20Bt1AmpZDT2Dmfmlb/Q1UFjj/F3C77NCNQ344ZcAEI42HY+uighy5GdKQRHMoTT1OzyDG90ABjggQqDGW+zXzyIDAQAB","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":482168993,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"RSA","n":"AJLKZN-5Rgal5jz6tgi-SnQ3kce8RYk2naS943OJ12qn7QraTOqhMX63NiS2iLJ8KcHxjApX3v2pSLNhq0_X6TPKA3gnHLwt_Q82YbEhZwBC4IIt4Z1jSkS30ldFCcwSPuYWeon1LL_FvJkhypbFTJrznwtj-fpe9qk8Dei3t4cugsRaebPacNNdQeydz1OubLcuhiPbHoQdgf5-534lsPWDefvqX8MqIrc6DKFSjjqY-3xavPH_AK6Qu5EdUgU3ttAbdQJqWQ09g5n5pW_0NVBY4_xdwu-zQjUN-OGXABCONh2ProoIcuRnSkERzKE09Ts8gxvdAAY4IEKgxlvs188","e":"AQAB","use":"sig","alg":"RS256","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_RS256_TINK (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_RS256_TINK
test_convert_from_jwt_key_RS256_TINK('{"primaryKeyId":482168993,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAEagQIAkspk37lGBqXmPPq2CL5KdDeRx7xFiTadpL3jc4nXaqftCtpM6qExfrc2JLaIsnwpwfGMClfe/alIs2GrT9fpM8oDeCccvC39DzZhsSFnAELggi3hnWNKRLfSV0UJzBI+5hZ6ifUsv8W8mSHKlsVMmvOfC2P5+l72qTwN6Le3hy6CxFp5s9pw011B7J3PU65sty6GI9sehB2B/n7nfiWw9YN5++pfwyoitzoMoVKOOpj7fFq88f8ArpC7kR1SBTe20Bt1AmpZDT2Dmfmlb/Q1UFjj/F3C77NCNQ344ZcAEI42HY+uighy5GdKQRHMoTT1OzyDG90ABjggQqDGW+zXzyIDAQAB","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":482168993,"outputPrefixType":"TINK"}]}', '{"keys":[{"kty":"RSA","n":"AJLKZN-5Rgal5jz6tgi-SnQ3kce8RYk2naS943OJ12qn7QraTOqhMX63NiS2iLJ8KcHxjApX3v2pSLNhq0_X6TPKA3gnHLwt_Q82YbEhZwBC4IIt4Z1jSkS30ldFCcwSPuYWeon1LL_FvJkhypbFTJrznwtj-fpe9qk8Dei3t4cugsRaebPacNNdQeydz1OubLcuhiPbHoQdgf5-534lsPWDefvqX8MqIrc6DKFSjjqY-3xavPH_AK6Qu5EdUgU3ttAbdQJqWQ09g5n5pW_0NVBY4_xdwu-zQjUN-OGXABCONh2ProoIcuRnSkERzKE09Ts8gxvdAAY4IEKgxlvs188","e":"AQAB","use":"sig","alg":"RS256","key_ops":["verify"],"kid":"HL1QoQ"}]}') ... ok
test_convert_from_jwt_key_RS384_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_RS384_RAW
test_convert_from_jwt_key_RS384_RAW('{"primaryKeyId":333504275,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAIagQMAnlBY5WD7gVQjNKvrS2whLKzt0Eql72B6haZ17eKifNn4S49eGdBy9RLj/mvHXAbacrngt9fzi0iv/WQ57jUmtO1b/wLt5LYk9APsBYjywDCIe+u9UouikP7c3SBqjjQijZ50jgYbMY6cL7s2Gx5lI1vlGX3ZExLVYbNoI9VBFAWjSDefd6GugESxXQFnnO3p2GHOKryZLeDH/KzVacTq2/pVXKVH/9/EQzcLB0oYUljZ4vYQ4HCAcwnUZbirsRwA0350Dz0Mlj+3+9sSAF8FPA+F/wlIBkPqjJ26b80V5FU4mBTzvYoXGTjkD7+bxH9p28huJSU96P4WdG5PYVwI1VEYwGipkUIpMWjJ7dXAtmltHzM9vkUt2bsBe9vyJjmRXyoC6mHSJbSyOm9Dd8BENobcUL9h+aBoxruY+mU49kAHzzeAntn8C+vIrxN+X6N2EU9N8t9BF+mwYiBEsY54wx99RbRrY9yICfPBmQJGwXSxNCXBRrbJyxkIVuqvACP5IgMBAAE=","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":333504275,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"RSA","n":"AJ5QWOVg-4FUIzSr60tsISys7dBKpe9geoWmde3ionzZ-EuPXhnQcvUS4_5rx1wG2nK54LfX84tIr_1kOe41JrTtW_8C7eS2JPQD7AWI8sAwiHvrvVKLopD-3N0gao40Io2edI4GGzGOnC-7NhseZSNb5Rl92RMS1WGzaCPVQRQFo0g3n3ehroBEsV0BZ5zt6dhhziq8mS3gx_ys1WnE6tv6VVylR__fxEM3CwdKGFJY2eL2EOBwgHMJ1GW4q7EcANN-dA89DJY_t_vbEgBfBTwPhf8JSAZD6oydum_NFeRVOJgU872KFxk45A-_m8R_advIbiUlPej-FnRuT2FcCNVRGMBoqZFCKTFoye3VwLZpbR8zPb5FLdm7AXvb8iY5kV8qAuph0iW0sjpvQ3fARDaG3FC_YfmgaMa7mPplOPZAB883gJ7Z_AvryK8Tfl-jdhFPTfLfQRfpsGIgRLGOeMMffUW0a2PciAnzwZkCRsF0sTQlwUa2ycsZCFbqrwAj-Q","e":"AQAB","use":"sig","alg":"RS384","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_RS512_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_RS512_RAW
test_convert_from_jwt_key_RS512_RAW('{"primaryKeyId":705596479,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAMagQQAkKxZ9IRzF56gh47RXLJzQ6lffcnBmQSwvxUDJ0wHpKZzfAawOn1uidbgEoQ3XWOgtNvi7QeKLE4GjQa5bY0xdRnu8nKjFcsvH+eu1sV8oVoZ984J5mT1mhwU6nt26p4xKyeapMhzYYNvKudQjQJ8SbpVOFpEiJ7j0ECMUd4Q8mCUqWsrXYE8+1CcHjprsIxdot+haCARc72RBj9cLuBIhJNzlFXNmsYh8yoSiEYr/auRvg/kIlNlnlOK/rJM/jMXbB6FuWdePrtqZ+ce2TVyARqjZJ0G0vZcPuvOhgS4LM7/Aeal84ZhIcHladSo/g8pK1eUhnRqRXJpsltwux+1XVJeg2a0FQ0BN3Ft25uu5jhfvGWXeTkQOR7LbpbxKTI+vumSy9dmY4UrgAG37N8Xj5/NeqBT51L3qE6tk2ZLoO7yjRjhADK5lnbb4iYWWvWd3kqyv0JVlxfDzjAaYtiduEUIdCe45MGk8DpCn9Lnjlunhm4QyQufK8k8UPiBbWNEODI8pjTSEjs0wyMqhegBKAvtVEhr029bg3Lv7YjN9FDvx4usuWGc16bXkTqNgCK4KzPG7PwV120r6IVGflfpSkd5rrkzDY01fsP0mW57QCHA67bxqLUECr2dAfNzz6ddS9pqXQyXZWCyWKcvTFsGrr1oECwDOmW+nUIHGklr9Q0iAwEAAQ==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":705596479,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"RSA","n":"AJCsWfSEcxeeoIeO0Vyyc0OpX33JwZkEsL8VAydMB6Smc3wGsDp9bonW4BKEN11joLTb4u0HiixOBo0GuW2NMXUZ7vJyoxXLLx_nrtbFfKFaGffOCeZk9ZocFOp7duqeMSsnmqTIc2GDbyrnUI0CfEm6VThaRIie49BAjFHeEPJglKlrK12BPPtQnB46a7CMXaLfoWggEXO9kQY_XC7gSISTc5RVzZrGIfMqEohGK_2rkb4P5CJTZZ5Tiv6yTP4zF2wehblnXj67amfnHtk1cgEao2SdBtL2XD7rzoYEuCzO_wHmpfOGYSHB5WnUqP4PKStXlIZ0akVyabJbcLsftV1SXoNmtBUNATdxbdubruY4X7xll3k5EDkey26W8SkyPr7pksvXZmOFK4ABt-zfF4-fzXqgU-dS96hOrZNmS6Du8o0Y4QAyuZZ22-ImFlr1nd5Ksr9CVZcXw84wGmLYnbhFCHQnuOTBpPA6Qp_S545bp4ZuEMkLnyvJPFD4gW1jRDgyPKY00hI7NMMjKoXoASgL7VRIa9NvW4Ny7-2IzfRQ78eLrLlhnNem15E6jYAiuCszxuz8FddtK-iFRn5X6UpHea65Mw2NNX7D9Jlue0AhwOu28ai1BAq9nQHzc8-nXUvaal0Ml2VgslinL0xbBq69aBAsAzplvp1CBxpJa_UN","e":"AQAB","use":"sig","alg":"RS512","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_TWO_KEYS (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_TWO_KEYS
test_convert_from_jwt_key_TWO_KEYS('{"primaryKeyId":282600252,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtEcdsaPublicKey","value":"EAEaIBDPI66hjLHvjxmUJ2nyHIBDmdOtQ4gPsvWgYYgZ0gygIiBTEK0rTACpAb97m+mvtJKAk0q3mHjPcUZm0C4EueDW4Q==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":282600252,"outputPrefixType":"RAW"},{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAEagQIAkspk37lGBqXmPPq2CL5KdDeRx7xFiTadpL3jc4nXaqftCtpM6qExfrc2JLaIsnwpwfGMClfe/alIs2GrT9fpM8oDeCccvC39DzZhsSFnAELggi3hnWNKRLfSV0UJzBI+5hZ6ifUsv8W8mSHKlsVMmvOfC2P5+l72qTwN6Le3hy6CxFp5s9pw011B7J3PU65sty6GI9sehB2B/n7nfiWw9YN5++pfwyoitzoMoVKOOpj7fFq88f8ArpC7kR1SBTe20Bt1AmpZDT2Dmfmlb/Q1UFjj/F3C77NCNQ344ZcAEI42HY+uighy5GdKQRHMoTT1OzyDG90ABjggQqDGW+zXzyIDAQAB","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":482168993,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"EC","crv":"P-256","x":"EM8jrqGMse-PGZQnafIcgEOZ061DiA-y9aBhiBnSDKA","y":"UxCtK0wAqQG_e5vpr7SSgJNKt5h4z3FGZtAuBLng1uE","use":"sig","alg":"ES256","key_ops":["verify"]},{"kty":"RSA","n":"AJLKZN-5Rgal5jz6tgi-SnQ3kce8RYk2naS943OJ12qn7QraTOqhMX63NiS2iLJ8KcHxjApX3v2pSLNhq0_X6TPKA3gnHLwt_Q82YbEhZwBC4IIt4Z1jSkS30ldFCcwSPuYWeon1LL_FvJkhypbFTJrznwtj-fpe9qk8Dei3t4cugsRaebPacNNdQeydz1OubLcuhiPbHoQdgf5-534lsPWDefvqX8MqIrc6DKFSjjqY-3xavPH_AK6Qu5EdUgU3ttAbdQJqWQ09g5n5pW_0NVBY4_xdwu-zQjUN-OGXABCONh2ProoIcuRnSkERzKE09Ts8gxvdAAY4IEKgxlvs188","e":"AQAB","use":"sig","alg":"RS256","key_ops":["verify"]}]}') ... ok
test_convert_from_jwt_key_WITH_DISABLED_KEY (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_from_jwt_key_WITH_DISABLED_KEY
test_convert_from_jwt_key_WITH_DISABLED_KEY('{"primaryKeyId":282600252,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtEcdsaPublicKey","value":"EAEaIBDPI66hjLHvjxmUJ2nyHIBDmdOtQ4gPsvWgYYgZ0gygIiBTEK0rTACpAb97m+mvtJKAk0q3mHjPcUZm0C4EueDW4Q==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":282600252,"outputPrefixType":"RAW"},{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAEagQIAkspk37lGBqXmPPq2CL5KdDeRx7xFiTadpL3jc4nXaqftCtpM6qExfrc2JLaIsnwpwfGMClfe/alIs2GrT9fpM8oDeCccvC39DzZhsSFnAELggi3hnWNKRLfSV0UJzBI+5hZ6ifUsv8W8mSHKlsVMmvOfC2P5+l72qTwN6Le3hy6CxFp5s9pw011B7J3PU65sty6GI9sehB2B/n7nfiWw9YN5++pfwyoitzoMoVKOOpj7fFq88f8ArpC7kR1SBTe20Bt1AmpZDT2Dmfmlb/Q1UFjj/F3C77NCNQ344ZcAEI42HY+uighy5GdKQRHMoTT1OzyDG90ABjggQqDGW+zXzyIDAQAB","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"DISABLED","keyId":482168993,"outputPrefixType":"RAW"}]}', '{"keys":[{"kty":"EC","crv":"P-256","x":"EM8jrqGMse-PGZQnafIcgEOZ061DiA-y9aBhiBnSDKA","y":"UxCtK0wAqQG_e5vpr7SSgJNKt5h4z3FGZtAuBLng1uE","use":"sig","alg":"ES256","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_ES256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_ES256_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_ES256_RAW('{"keys":[{"kty":"EC","crv":"P-256","x":"EM8jrqGMse-PGZQnafIcgEOZ061DiA-y9aBhiBnSDKA","y":"UxCtK0wAqQG_e5vpr7SSgJNKt5h4z3FGZtAuBLng1uE","use":"sig","alg":"ES256","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_ES256_TINK (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_ES256_TINK
test_convert_jwk_set_to_public_keyset_handle_and_back_ES256_TINK('{"keys":[{"kty":"EC","crv":"P-256","x":"EM8jrqGMse-PGZQnafIcgEOZ061DiA-y9aBhiBnSDKA","y":"UxCtK0wAqQG_e5vpr7SSgJNKt5h4z3FGZtAuBLng1uE","use":"sig","alg":"ES256","key_ops":["verify"],"kid":"ENgjPA"}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_ES384_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_ES384_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_ES384_RAW('{"keys":[{"kty":"EC","crv":"P-384","x":"ANKO9aKGgoaavieUO4j8qS-4-8Rmv4HhtTQy5dBBeDI0wYCkWbaJN6i2_ssJKwbeZA","y":"QcgwbHjBr5jzJ4lBYyJKm6Sk8zuM_0aprKRlBDYZj80uD-f34Em2e2C8WEbmBYtO","use":"sig","alg":"ES384","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_ES512_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_ES512_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_ES512_RAW('{"keys":[{"kty":"EC","crv":"P-521","x":"ARXefB5F6PpnX9o9OoKRzW1CVrl5Ujrz6p_BHWQH_BcK5gIHmi1quGiZS3rgVqH_xON_RYkcxnIWvzpFSK2JFCbV","y":"ATht_NOX8RcbaEr1MaH-0BFTaepvpTzSfQ04C2P8VCoURB3GeVKk4VQh8O_KLSYfX-58bqEnaZ0G7W9qjHa2ols2","use":"sig","alg":"ES512","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_PS256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_PS256_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_PS256_RAW('{"keys":[{"kty":"RSA","n":"AJLKZN-5Rgal5jz6tgi-SnQ3kce8RYk2naS943OJ12qn7QraTOqhMX63NiS2iLJ8KcHxjApX3v2pSLNhq0_X6TPKA3gnHLwt_Q82YbEhZwBC4IIt4Z1jSkS30ldFCcwSPuYWeon1LL_FvJkhypbFTJrznwtj-fpe9qk8Dei3t4cugsRaebPacNNdQeydz1OubLcuhiPbHoQdgf5-534lsPWDefvqX8MqIrc6DKFSjjqY-3xavPH_AK6Qu5EdUgU3ttAbdQJqWQ09g5n5pW_0NVBY4_xdwu-zQjUN-OGXABCONh2ProoIcuRnSkERzKE09Ts8gxvdAAY4IEKgxlvs188","e":"AQAB","use":"sig","alg":"RS256","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_PS256_TINK (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_PS256_TINK
test_convert_jwk_set_to_public_keyset_handle_and_back_PS256_TINK('{"keys":[{"kty":"RSA","n":"AJLKZN-5Rgal5jz6tgi-SnQ3kce8RYk2naS943OJ12qn7QraTOqhMX63NiS2iLJ8KcHxjApX3v2pSLNhq0_X6TPKA3gnHLwt_Q82YbEhZwBC4IIt4Z1jSkS30ldFCcwSPuYWeon1LL_FvJkhypbFTJrznwtj-fpe9qk8Dei3t4cugsRaebPacNNdQeydz1OubLcuhiPbHoQdgf5-534lsPWDefvqX8MqIrc6DKFSjjqY-3xavPH_AK6Qu5EdUgU3ttAbdQJqWQ09g5n5pW_0NVBY4_xdwu-zQjUN-OGXABCONh2ProoIcuRnSkERzKE09Ts8gxvdAAY4IEKgxlvs188","e":"AQAB","use":"sig","alg":"RS256","key_ops":["verify"],"kid":"HL1QoQ"}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_PS384_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_PS384_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_PS384_RAW('{"keys":[{"kty":"RSA","n":"AJ5QWOVg-4FUIzSr60tsISys7dBKpe9geoWmde3ionzZ-EuPXhnQcvUS4_5rx1wG2nK54LfX84tIr_1kOe41JrTtW_8C7eS2JPQD7AWI8sAwiHvrvVKLopD-3N0gao40Io2edI4GGzGOnC-7NhseZSNb5Rl92RMS1WGzaCPVQRQFo0g3n3ehroBEsV0BZ5zt6dhhziq8mS3gx_ys1WnE6tv6VVylR__fxEM3CwdKGFJY2eL2EOBwgHMJ1GW4q7EcANN-dA89DJY_t_vbEgBfBTwPhf8JSAZD6oydum_NFeRVOJgU872KFxk45A-_m8R_advIbiUlPej-FnRuT2FcCNVRGMBoqZFCKTFoye3VwLZpbR8zPb5FLdm7AXvb8iY5kV8qAuph0iW0sjpvQ3fARDaG3FC_YfmgaMa7mPplOPZAB883gJ7Z_AvryK8Tfl-jdhFPTfLfQRfpsGIgRLGOeMMffUW0a2PciAnzwZkCRsF0sTQlwUa2ycsZCFbqrwAj-Q","e":"AQAB","use":"sig","alg":"RS384","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_PS512_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_PS512_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_PS512_RAW('{"keys":[{"kty":"RSA","n":"AJCsWfSEcxeeoIeO0Vyyc0OpX33JwZkEsL8VAydMB6Smc3wGsDp9bonW4BKEN11joLTb4u0HiixOBo0GuW2NMXUZ7vJyoxXLLx_nrtbFfKFaGffOCeZk9ZocFOp7duqeMSsnmqTIc2GDbyrnUI0CfEm6VThaRIie49BAjFHeEPJglKlrK12BPPtQnB46a7CMXaLfoWggEXO9kQY_XC7gSISTc5RVzZrGIfMqEohGK_2rkb4P5CJTZZ5Tiv6yTP4zF2wehblnXj67amfnHtk1cgEao2SdBtL2XD7rzoYEuCzO_wHmpfOGYSHB5WnUqP4PKStXlIZ0akVyabJbcLsftV1SXoNmtBUNATdxbdubruY4X7xll3k5EDkey26W8SkyPr7pksvXZmOFK4ABt-zfF4-fzXqgU-dS96hOrZNmS6Du8o0Y4QAyuZZ22-ImFlr1nd5Ksr9CVZcXw84wGmLYnbhFCHQnuOTBpPA6Qp_S545bp4ZuEMkLnyvJPFD4gW1jRDgyPKY00hI7NMMjKoXoASgL7VRIa9NvW4Ny7-2IzfRQ78eLrLlhnNem15E6jYAiuCszxuz8FddtK-iFRn5X6UpHea65Mw2NNX7D9Jlue0AhwOu28ai1BAq9nQHzc8-nXUvaal0Ml2VgslinL0xbBq69aBAsAzplvp1CBxpJa_UN","e":"AQAB","use":"sig","alg":"RS512","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_RS256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_RS256_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_RS256_RAW('{"keys":[{"kty":"RSA","n":"AJLKZN-5Rgal5jz6tgi-SnQ3kce8RYk2naS943OJ12qn7QraTOqhMX63NiS2iLJ8KcHxjApX3v2pSLNhq0_X6TPKA3gnHLwt_Q82YbEhZwBC4IIt4Z1jSkS30ldFCcwSPuYWeon1LL_FvJkhypbFTJrznwtj-fpe9qk8Dei3t4cugsRaebPacNNdQeydz1OubLcuhiPbHoQdgf5-534lsPWDefvqX8MqIrc6DKFSjjqY-3xavPH_AK6Qu5EdUgU3ttAbdQJqWQ09g5n5pW_0NVBY4_xdwu-zQjUN-OGXABCONh2ProoIcuRnSkERzKE09Ts8gxvdAAY4IEKgxlvs188","e":"AQAB","use":"sig","alg":"RS256","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_RS256_TINK (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_RS256_TINK
test_convert_jwk_set_to_public_keyset_handle_and_back_RS256_TINK('{"keys":[{"kty":"RSA","n":"AJLKZN-5Rgal5jz6tgi-SnQ3kce8RYk2naS943OJ12qn7QraTOqhMX63NiS2iLJ8KcHxjApX3v2pSLNhq0_X6TPKA3gnHLwt_Q82YbEhZwBC4IIt4Z1jSkS30ldFCcwSPuYWeon1LL_FvJkhypbFTJrznwtj-fpe9qk8Dei3t4cugsRaebPacNNdQeydz1OubLcuhiPbHoQdgf5-534lsPWDefvqX8MqIrc6DKFSjjqY-3xavPH_AK6Qu5EdUgU3ttAbdQJqWQ09g5n5pW_0NVBY4_xdwu-zQjUN-OGXABCONh2ProoIcuRnSkERzKE09Ts8gxvdAAY4IEKgxlvs188","e":"AQAB","use":"sig","alg":"RS256","key_ops":["verify"],"kid":"HL1QoQ"}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_RS384_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_RS384_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_RS384_RAW('{"keys":[{"kty":"RSA","n":"AJ5QWOVg-4FUIzSr60tsISys7dBKpe9geoWmde3ionzZ-EuPXhnQcvUS4_5rx1wG2nK54LfX84tIr_1kOe41JrTtW_8C7eS2JPQD7AWI8sAwiHvrvVKLopD-3N0gao40Io2edI4GGzGOnC-7NhseZSNb5Rl92RMS1WGzaCPVQRQFo0g3n3ehroBEsV0BZ5zt6dhhziq8mS3gx_ys1WnE6tv6VVylR__fxEM3CwdKGFJY2eL2EOBwgHMJ1GW4q7EcANN-dA89DJY_t_vbEgBfBTwPhf8JSAZD6oydum_NFeRVOJgU872KFxk45A-_m8R_advIbiUlPej-FnRuT2FcCNVRGMBoqZFCKTFoye3VwLZpbR8zPb5FLdm7AXvb8iY5kV8qAuph0iW0sjpvQ3fARDaG3FC_YfmgaMa7mPplOPZAB883gJ7Z_AvryK8Tfl-jdhFPTfLfQRfpsGIgRLGOeMMffUW0a2PciAnzwZkCRsF0sTQlwUa2ycsZCFbqrwAj-Q","e":"AQAB","use":"sig","alg":"RS384","key_ops":["verify"]}]}') ... ok
test_convert_jwk_set_to_public_keyset_handle_and_back_RS512_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_convert_jwk_set_to_public_keyset_handle_and_back_RS512_RAW
test_convert_jwk_set_to_public_keyset_handle_and_back_RS512_RAW('{"keys":[{"kty":"RSA","n":"AJCsWfSEcxeeoIeO0Vyyc0OpX33JwZkEsL8VAydMB6Smc3wGsDp9bonW4BKEN11joLTb4u0HiixOBo0GuW2NMXUZ7vJyoxXLLx_nrtbFfKFaGffOCeZk9ZocFOp7duqeMSsnmqTIc2GDbyrnUI0CfEm6VThaRIie49BAjFHeEPJglKlrK12BPPtQnB46a7CMXaLfoWggEXO9kQY_XC7gSISTc5RVzZrGIfMqEohGK_2rkb4P5CJTZZ5Tiv6yTP4zF2wehblnXj67amfnHtk1cgEao2SdBtL2XD7rzoYEuCzO_wHmpfOGYSHB5WnUqP4PKStXlIZ0akVyabJbcLsftV1SXoNmtBUNATdxbdubruY4X7xll3k5EDkey26W8SkyPr7pksvXZmOFK4ABt-zfF4-fzXqgU-dS96hOrZNmS6Du8o0Y4QAyuZZ22-ImFlr1nd5Ksr9CVZcXw84wGmLYnbhFCHQnuOTBpPA6Qp_S545bp4ZuEMkLnyvJPFD4gW1jRDgyPKY00hI7NMMjKoXoASgL7VRIa9NvW4Ny7-2IzfRQ78eLrLlhnNem15E6jYAiuCszxuz8FddtK-iFRn5X6UpHea65Mw2NNX7D9Jlue0AhwOu28ai1BAq9nQHzc8-nXUvaal0Ml2VgslinL0xbBq69aBAsAzplvp1CBxpJa_UN","e":"AQAB","use":"sig","alg":"RS512","key_ops":["verify"]}]}') ... ok
test_ecdsa_key_with_invalid_crv_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_with_invalid_crv_to_public_keyset_handle_fails ... ok
test_ecdsa_key_with_invalid_key_ops_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_with_invalid_key_ops_to_public_keyset_handle_fails ... ok
test_ecdsa_key_with_invalid_kty_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_with_invalid_kty_to_public_keyset_handle_fails ... ok
test_ecdsa_key_with_invalid_use_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_with_invalid_use_to_public_keyset_handle_fails ... ok
test_ecdsa_key_with_small_x_primitive_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_with_small_x_primitive_fails ... ok
test_ecdsa_key_with_small_y_primitive_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_with_small_y_primitive_fails ... ok
test_ecdsa_key_with_string_key_ops_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_with_string_key_ops_to_public_keyset_handle_fails ... ok
test_ecdsa_key_with_unknown_field_to_public_keyset_handle_success (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_with_unknown_field_to_public_keyset_handle_success ... ok
test_ecdsa_key_without_alg_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_without_alg_to_public_keyset_handle_fails ... ok
test_ecdsa_key_without_crv_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_without_crv_to_public_keyset_handle_fails ... ok
test_ecdsa_key_without_kty_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_key_without_kty_to_public_keyset_handle_fails ... ok
test_ecdsa_private_key_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_private_key_to_public_keyset_handle_fails ... ok
test_ecdsa_without_use_or_key_ops_to_public_keyset_handle_success (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_ecdsa_without_use_or_key_ops_to_public_keyset_handle_success ... ok
test_es_conserves_empty_kid (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_es_conserves_empty_kid ... ok
test_from_crunchy_ecdsa_keyset_fails_ES256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_from_crunchy_ecdsa_keyset_fails_ES256_RAW
test_from_crunchy_ecdsa_keyset_fails_ES256_RAW('{"primaryKeyId":282600252,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtEcdsaPublicKey","value":"EAEaIBDPI66hjLHvjxmUJ2nyHIBDmdOtQ4gPsvWgYYgZ0gygIiBTEK0rTACpAb97m+mvtJKAk0q3mHjPcUZm0C4EueDW4Q==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":282600252,"outputPrefixType":"RAW"}]}') ... ok
test_from_crunchy_ecdsa_keyset_fails_PS256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_from_crunchy_ecdsa_keyset_fails_PS256_RAW
test_from_crunchy_ecdsa_keyset_fails_PS256_RAW('{"primaryKeyId":482168993,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAEagQIAkspk37lGBqXmPPq2CL5KdDeRx7xFiTadpL3jc4nXaqftCtpM6qExfrc2JLaIsnwpwfGMClfe/alIs2GrT9fpM8oDeCccvC39DzZhsSFnAELggi3hnWNKRLfSV0UJzBI+5hZ6ifUsv8W8mSHKlsVMmvOfC2P5+l72qTwN6Le3hy6CxFp5s9pw011B7J3PU65sty6GI9sehB2B/n7nfiWw9YN5++pfwyoitzoMoVKOOpj7fFq88f8ArpC7kR1SBTe20Bt1AmpZDT2Dmfmlb/Q1UFjj/F3C77NCNQ344ZcAEI42HY+uighy5GdKQRHMoTT1OzyDG90ABjggQqDGW+zXzyIDAQAB","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":482168993,"outputPrefixType":"RAW"}]}') ... ok
test_from_crunchy_ecdsa_keyset_fails_RS256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_from_crunchy_ecdsa_keyset_fails_RS256_RAW
test_from_crunchy_ecdsa_keyset_fails_RS256_RAW('{"primaryKeyId":482168993,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAEagQIAkspk37lGBqXmPPq2CL5KdDeRx7xFiTadpL3jc4nXaqftCtpM6qExfrc2JLaIsnwpwfGMClfe/alIs2GrT9fpM8oDeCccvC39DzZhsSFnAELggi3hnWNKRLfSV0UJzBI+5hZ6ifUsv8W8mSHKlsVMmvOfC2P5+l72qTwN6Le3hy6CxFp5s9pw011B7J3PU65sty6GI9sehB2B/n7nfiWw9YN5++pfwyoitzoMoVKOOpj7fFq88f8ArpC7kR1SBTe20Bt1AmpZDT2Dmfmlb/Q1UFjj/F3C77NCNQ344ZcAEI42HY+uighy5GdKQRHMoTT1OzyDG90ABjggQqDGW+zXzyIDAQAB","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":482168993,"outputPrefixType":"RAW"}]}') ... ok
test_from_hs256_keyset_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_from_hs256_keyset_fails ... ok
test_from_legacy_ecdsa_keyset_fails_ES256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_from_legacy_ecdsa_keyset_fails_ES256_RAW
test_from_legacy_ecdsa_keyset_fails_ES256_RAW('{"primaryKeyId":282600252,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtEcdsaPublicKey","value":"EAEaIBDPI66hjLHvjxmUJ2nyHIBDmdOtQ4gPsvWgYYgZ0gygIiBTEK0rTACpAb97m+mvtJKAk0q3mHjPcUZm0C4EueDW4Q==","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":282600252,"outputPrefixType":"RAW"}]}') ... ok
test_from_legacy_ecdsa_keyset_fails_PS256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_from_legacy_ecdsa_keyset_fails_PS256_RAW
test_from_legacy_ecdsa_keyset_fails_PS256_RAW('{"primaryKeyId":1508587714,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPssPublicKey","value":"EAEagQMAj7Eud2n5G11qsdtjpgGWjW4cAKalSE1atm7d+Cp8biRX9wbmLJRMUvoO2j7Sp9Szx1TMmksY2Ugf/7+Nv9fY7vBbmxOiBQVTvikWn0FgPwhFTXTz+9fhGjM6E6sdSOUzjM6nsPulKqOQ8Aed+TLIlgvwuSTF4B5d6QkZWBymq7My6vV+epzWnoLpVDzCHh+c35r81Pyrj6tiTPQzPLN2ixeanclMjx8deNwlak3vwBdMDgwQ63rVCo2eWDS/BYK4rG22luSTDVfQVHU1NXlwXEnb/eONFSF6ZbD6JXFMT3uHT4okTOrX4Kd34stbPIUtZFUy3XiSeCGtghBXLMf/ge113Q9WDJ+RN1Xa4vgHJCO0+VO+cAugVkiu9UgsPP8o/r7tA2aP/Ps8EHYa1IaZg75vnrMZPvsTH7WG2SjSgW9GLLsbNJLFFqLFMwPuZPe8BbgvimPdStXasX/PN6DLKoK2PaT0I+iLK9mRi1Z4OjFbl9KAZXXElhAQTzrEI2adIgMBAAE=","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":1508587714,"outputPrefixType":"RAW"}]}') ... ok
test_from_legacy_ecdsa_keyset_fails_RS256_RAW (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_from_legacy_ecdsa_keyset_fails_RS256_RAW
test_from_legacy_ecdsa_keyset_fails_RS256_RAW('{"primaryKeyId":482168993,"key":[{"keyData":{"typeUrl":"type.googleapis.com/google.crypto.tink.JwtRsaSsaPkcs1PublicKey","value":"EAEagQIAkspk37lGBqXmPPq2CL5KdDeRx7xFiTadpL3jc4nXaqftCtpM6qExfrc2JLaIsnwpwfGMClfe/alIs2GrT9fpM8oDeCccvC39DzZhsSFnAELggi3hnWNKRLfSV0UJzBI+5hZ6ifUsv8W8mSHKlsVMmvOfC2P5+l72qTwN6Le3hy6CxFp5s9pw011B7J3PU65sty6GI9sehB2B/n7nfiWw9YN5++pfwyoitzoMoVKOOpj7fFq88f8ArpC7kR1SBTe20Bt1AmpZDT2Dmfmlb/Q1UFjj/F3C77NCNQ344ZcAEI42HY+uighy5GdKQRHMoTT1OzyDG90ABjggQqDGW+zXzyIDAQAB","keyMaterialType":"ASYMMETRIC_PUBLIC"},"status":"ENABLED","keyId":482168993,"outputPrefixType":"RAW"}]}') ... ok
test_from_private_keyset_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_from_private_keyset_fails ... ok
test_jwk_set_to_public_keyset_handle_with_invalid_json_raises_tink_error (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_jwk_set_to_public_keyset_handle_with_invalid_json_raises_tink_error ... ok
test_primary_key_id_missing_success (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_primary_key_id_missing_success ... ok
test_rsa_private_key_to_public_keyset_handle_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_private_key_to_public_keyset_handle_fails ... ok
test_rsa_ssa_pkcs1_with_unknown_property_keyset_handle_success (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_ssa_pkcs1_with_unknown_property_keyset_handle_success ... ok
test_rsa_ssa_pkcs1_without_use_and_key_ops_to_keyset_handle_success (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_ssa_pkcs1_without_use_and_key_ops_to_keyset_handle_success ... ok
test_rsa_ssa_pss_with_unknown_property_keyset_handle_success (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_ssa_pss_with_unknown_property_keyset_handle_success ... ok
test_rsa_ssa_pss_without_use_and_key_ops_to_keyset_handle_success (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_ssa_pss_without_use_and_key_ops_to_keyset_handle_success ... ok
test_rsa_with_invalid_key_ops_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_with_invalid_key_ops_fails ... ok
test_rsa_with_invalid_kty_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_with_invalid_kty_fails ... ok
test_rsa_with_invalid_use_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_with_invalid_use_fails ... ok
test_rsa_with_small_n_primitive_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_with_small_n_primitive_fails ... ok
test_rsa_with_string_key_ops_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_with_string_key_ops_fails ... ok
test_rsa_without_alg_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_without_alg_fails ... ok
test_rsa_without_kty_fails (tink.jwt._jwk_set_converter_test.JwkSetConverterTest)
tink.jwt._jwk_set_converter_test.JwkSetConverterTest.test_rsa_without_kty_fails ... ok
test_base64_decode_bad_format_raises_jwt_invalid_error (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_base64_decode_bad_format_raises_jwt_invalid_error ... ok
test_base64_decode_fails_with_unknown_chars (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_base64_decode_fails_with_unknown_chars ... ok
test_base64_encode_decode_header_fixed_data (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_base64_encode_decode_header_fixed_data ... ok
test_base64_encode_decode_payload_fixed_data (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_base64_encode_decode_payload_fixed_data ... ok
test_create_header_with_type (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_header_with_type ... ok
test_create_header_with_type_and_kid (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_header_with_type_and_kid ... ok
test_create_header_with_unknown_alg_fails (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_header_with_unknown_alg_fails ... ok
test_create_unsigned_compact_success (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_unsigned_compact_success ... ok
test_create_validate_header0 ('HS256') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header0 ('HS256')
test_create_validate_header('HS256') ... ok
test_create_validate_header1 ('HS384') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header1 ('HS384')
test_create_validate_header('HS384') ... ok
test_create_validate_header10 ('PS256') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header10 ('PS256')
test_create_validate_header('PS256') ... ok
test_create_validate_header11 ('PS384') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header11 ('PS384')
test_create_validate_header('PS384') ... ok
test_create_validate_header12 ('PS512') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header12 ('PS512')
test_create_validate_header('PS512') ... ok
test_create_validate_header2 ('HS512') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header2 ('HS512')
test_create_validate_header('HS512') ... ok
test_create_validate_header3 ('ES256') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header3 ('ES256')
test_create_validate_header('ES256') ... ok
test_create_validate_header4 ('ES384') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header4 ('ES384')
test_create_validate_header('ES384') ... ok
test_create_validate_header5 ('ES512') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header5 ('ES512')
test_create_validate_header('ES512') ... ok
test_create_validate_header6 ('RS256') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header6 ('RS256')
test_create_validate_header('RS256') ... ok
test_create_validate_header7 ('RS384') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header7 ('RS384')
test_create_validate_header('RS384') ... ok
test_create_validate_header8 ('RS384') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header8 ('RS384')
test_create_validate_header('RS384') ... ok
test_create_validate_header9 ('RS512') (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_validate_header9 ('RS512')
test_create_validate_header('RS512') ... ok
test_create_verify_different_algorithms_fails (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_create_verify_different_algorithms_fails ... ok
test_decode_encode_header_hs256 (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_decode_encode_header_hs256 ... ok
test_decode_encode_header_rs256 (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_decode_encode_header_rs256 ... ok
test_decode_encode_payload (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_decode_encode_payload ... ok
test_decode_header_with_invalid_utf8 (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_decode_header_with_invalid_utf8 ... ok
test_encode_decode_header (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_encode_decode_header ... ok
test_encode_decode_signature_success (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_encode_decode_signature_success ... ok
test_encode_header_with_invalid_utf16_character (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_encode_header_with_invalid_utf16_character ... ok
test_encode_header_with_utf16_surrogate (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_encode_header_with_utf16_surrogate ... ok
test_encode_payload_with_invalid_utf16 (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_encode_payload_with_invalid_utf16 ... ok
test_encode_payload_with_utf16_surrogate (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_encode_payload_with_utf16_surrogate ... ok
test_get_kid_invalid_input_fails (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_get_kid_invalid_input_fails ... ok
test_get_kid_success (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_get_kid_success ... ok
test_json_decode_encode_payload_fixed_data (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_json_decode_encode_payload_fixed_data ... ok
test_signed_compact_create_split (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_signed_compact_create_split ... ok
test_signed_compact_create_split_with_kid (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_signed_compact_create_split_with_kid ... ok
test_split_empty_signed_compact (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_split_empty_signed_compact ... ok
test_split_signed_compact_success (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_split_signed_compact_success ... ok
test_split_signed_compact_with_bad_characters_fails (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_split_signed_compact_with_bad_characters_fails ... ok
test_split_signed_compact_with_bad_format_fails (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_split_signed_compact_with_bad_format_fails ... ok
test_split_signed_compact_with_invalid_utf8_in_header (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_split_signed_compact_with_invalid_utf8_in_header ... ok
test_validate_header_ignores_typ (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_validate_header_ignores_typ ... ok
test_validate_header_rejects_crit (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_validate_header_rejects_crit ... ok
test_validate_header_with_kid_success (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_validate_header_with_kid_success ... ok
test_validate_header_with_missing_kid_missing (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_validate_header_with_missing_kid_missing ... ok
test_validate_header_with_other_kid_fails (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_validate_header_with_other_kid_fails ... ok
test_validate_header_with_unknown_algorithm_fails (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_validate_header_with_unknown_algorithm_fails ... ok
test_validate_header_with_unknown_entry_success (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_validate_header_with_unknown_entry_success ... ok
test_verify_empty_header_fails (tink.jwt._jwt_format_test.JwtFormatTest)
tink.jwt._jwt_format_test.JwtFormatTest.test_verify_empty_header_fails ... ok
test_audience_in_token_but_not_in_validator_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_audience_in_token_but_not_in_validator_fails ... ok
test_correct_audience_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_correct_audience_success ... ok
test_correct_issuer_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_correct_issuer_success ... ok
test_correct_type_header_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_correct_type_header_success ... ok
test_empty_validator_getters (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_empty_validator_getters ... ok
test_fixed_now_without_timezone_fail (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_fixed_now_without_timezone_fail ... ok
test_ignore_audiences_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_ignore_audiences_success ... ok
test_ignore_issuer_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_ignore_issuer_success ... ok
test_ignore_type_header_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_ignore_type_header_success ... ok
test_invalid_clock_skew_fail (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_invalid_clock_skew_fail ... ok
test_invalid_issuer_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_invalid_issuer_fails ... ok
test_invalid_type_header_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_invalid_type_header_fails ... ok
test_issuer_in_token_but_not_in_validator_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_issuer_in_token_but_not_in_validator_fails ... ok
test_no_audience_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_no_audience_success ... ok
test_requires_audience_but_no_audience_set_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_requires_audience_but_no_audience_set_fails ... ok
test_requires_issuer_but_no_issuer_set_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_requires_issuer_but_no_issuer_set_fails ... ok
test_requires_type_header_but_no_type_header_set_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_requires_type_header_but_no_type_header_set_fails ... ok
test_too_much_clock_skew (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_too_much_clock_skew ... ok
test_type_header_in_token_but_not_in_validator_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_type_header_in_token_but_not_in_validator_fails ... ok
test_validate_expired_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_expired_fails ... ok
test_validate_issued_at (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_issued_at ... ok
test_validate_issued_at_with_clock_skew (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_issued_at_with_clock_skew ... ok
test_validate_not_before_almost_reached_with_clock_skew_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_not_before_almost_reached_with_clock_skew_success ... ok
test_validate_not_before_in_the_future_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_not_before_in_the_future_fails ... ok
test_validate_not_before_in_the_past_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_not_before_in_the_past_success ... ok
test_validate_not_before_is_now_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_not_before_is_now_success ... ok
test_validate_not_expired_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_not_expired_success ... ok
test_validate_recently_expired_with_clock_skew_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_recently_expired_with_clock_skew_success ... ok
test_validate_token_that_expires_now_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_token_that_expires_now_fails ... ok
test_validate_with_fixed_now_expired_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_with_fixed_now_expired_fails ... ok
test_validate_with_fixed_now_not_yet_valid_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_with_fixed_now_not_yet_valid_fails ... ok
test_validate_with_fixed_now_valid_success (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validate_with_fixed_now_valid_success ... ok
test_validator_getters (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validator_getters ... ok
test_validator_ignore_getters (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_validator_ignore_getters ... ok
test_wrong_audience_fails (tink.jwt._jwt_validator_test.JwtValidatorTest)
tink.jwt._jwt_validator_test.JwtValidatorTest.test_wrong_audience_fails ... ok
